
// Don't need the running rt.jar because we are supplying it
exclude-running-runtime-jar = true

// This automatically trims off methods/fields for classes we don't reference
only-methods-referencing-classes = true
only-fields-referencing-classes = true
exclude-private-methods = true
exclude-private-fields = true

// show-exclusions = true

// Prepend the statement that we use a redistributable OpenJDK JAR as our source
prepend-to-file =
  "// Generated from Azul Zulu packaged OpenJDK JAR and carries the same GPL license with the classpath exception"

class-path = [
  ${ZULU_JDK_HOME}/jmods/java.base.jmod
]

// Put in rt which automatically gives "rt" as the package name
out-dir = compiler/src/test/go/javalib/rt

parallel = true

file-grouping = "package"

file-transformers = [ "goahead.compile.TestRtFileTransformer" ]

classes = [
  "java.io.PrintStream"
  "java.lang.Boolean"
  "java.lang.Byte"
  "java.lang.Character"
  "java.lang.Class"
  "java.lang.ClassLoader"
  "java.lang.ClassCastException"
  "java.lang.Double"
  "java.lang.Exception"
  "java.lang.Float"
  "java.lang.IllegalArgumentException"
  "java.lang.IllegalMonitorStateException"
  "java.lang.Integer"
  "java.lang.Long"
  "java.lang.NegativeArraySizeException"
  "java.lang.NullPointerException"
  "java.lang.Short"
  "java.lang.String"
  "java.lang.StringBuilder"
  "java.lang.System"
  "java.lang.VirtualMachineError"
  "java.lang.Void"
  "java.lang.invoke.CallSite"
  "java.lang.invoke.LambdaMetafactory"
  "java.lang.invoke.MethodHandle"
  "java.lang.invoke.MethodHandles"
  "java.lang.invoke.MethodHandles$Lookup"
  "java.lang.invoke.MethodType"
  "java.lang.invoke.SerializedLambda"
  "java.util.function.BiConsumer"
  "java.util.function.BinaryOperator"
  "java.util.function.IntFunction"
  "java.util.function.Function"
  "java.util.stream.Stream"
]

// Override some methods
override-methods = [
  "java.io.PrintStream::println(C)V"
  "java.io.PrintStream::println(D)V"
  "java.io.PrintStream::println(F)V"
  "java.io.PrintStream::println(I)V"
  "java.io.PrintStream::println(J)V"
  "java.io.PrintStream::println(Ljava/lang/String;)V"
  "java.io.PrintStream::println(Z)V"
  "java.lang.ClassCastException::<init>()V"
  "java.lang.Exception::<init>(Ljava/lang/String;)V"
  "java.lang.Exception::<init>(Ljava/lang/String;Ljava/lang/Throwable;)V"
  "java.lang.IllegalMonitorStateException::<init>()V"
  "java.lang.Long::valueOf(J)Ljava/lang/Long;"
  "java.lang.Long::longValue()J"
  "java.lang.Long::<init>(J)V"
  "java.lang.NegativeArraySizeException::<init>(Ljava/lang/String;)V"
  "java.lang.NullPointerException::<init>(Ljava/lang/String;)V"
  "java.lang.Object::<init>()V"
  "java.lang.Object::getClass()Ljava/lang/Class;"
  "java.lang.Object::hashCode()I"
  "java.lang.StringBuilder::<init>()V"
  "java.lang.StringBuilder::append(I)Ljava/lang/StringBuilder;"
  "java.lang.StringBuilder::append(Ljava/lang/String;)Ljava/lang/StringBuilder;"
  "java.lang.StringBuilder::toString()Ljava/lang/String;"
  "java.lang.System::<clinit>()V"
  "java.lang.System::identityHashCode(Ljava/lang/Object;)I"
  "java.lang.Throwable::<init>(Ljava/lang/String;)V"
  "java.lang.Throwable::getMessage()Ljava/lang/String;"
  "java.lang.VirtualMachineError::<init>(Ljava/lang/String;)V"
]

// Panic all other methods
bodyless-methods = [
  "*"
]