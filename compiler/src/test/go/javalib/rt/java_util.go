// Generated from Azul Zulu packaged OpenJDK JAR and carries the same GPL license with the classpath exception
package rt

import "sync"

type Java__util__AbstractMap__Static struct{}

var Java__util__AbstractMap__Var Java__util__AbstractMap__Static

func Java__util__AbstractMap() *Java__util__AbstractMap__Static {
	return &Java__util__AbstractMap__Var
}

func (this *Java__util__AbstractMap__Static) New() *Java__util__AbstractMap__Impl {
	v := &Java__util__AbstractMap__Impl{
		Java__lang__Object__Impl: Java__lang__Object().New(),
	}
	v.Java__util__AbstractMap__InitDispatch(v)
	return v
}

func (this *Java__util__AbstractMap__Static) Impl__PrivTo__Java__util__Access__dollar__000__desc____obj__Java__lang__Object____obj__Java__lang__Object__ret__Z(var0 Java__lang__Object__Instance, var1 Java__lang__Object__Instance) bool {
	panic("Method not implemented - java/util/AbstractMap.access$000(Ljava/lang/Object;Ljava/lang/Object;)Z")
}

type Java__util__AbstractMap__Dispatch interface {
	Java__lang__Object__Dispatch
	Impl__Clear__desc____ret__V()
	Impl__Compute__desc____obj__Java__lang__Object____obj__Java__util__function__BiFunction__ret____obj__Java__lang__Object(Java__lang__Object__Instance, Java__util__function__BiFunction__Instance) Java__lang__Object__Instance
	Impl__ComputeIfAbsent__desc____obj__Java__lang__Object____obj__Java__util__function__Function__ret____obj__Java__lang__Object(Java__lang__Object__Instance, Java__util__function__Function__Instance) Java__lang__Object__Instance
	Impl__ComputeIfPresent__desc____obj__Java__lang__Object____obj__Java__util__function__BiFunction__ret____obj__Java__lang__Object(Java__lang__Object__Instance, Java__util__function__BiFunction__Instance) Java__lang__Object__Instance
	Impl__ContainsKey__desc____obj__Java__lang__Object__ret__Z(Java__lang__Object__Instance) bool
	Impl__ContainsValue__desc____obj__Java__lang__Object__ret__Z(Java__lang__Object__Instance) bool
	Impl__ForEach__desc____obj__Java__util__function__BiConsumer__ret__V(Java__util__function__BiConsumer__Instance)
	Impl__Get__desc____obj__Java__lang__Object__ret____obj__Java__lang__Object(Java__lang__Object__Instance) Java__lang__Object__Instance
	Impl__GetOrDefault__desc____obj__Java__lang__Object____obj__Java__lang__Object__ret____obj__Java__lang__Object(Java__lang__Object__Instance, Java__lang__Object__Instance) Java__lang__Object__Instance
	Impl__IsEmpty__desc____ret__Z() bool
	Impl__Merge__desc____obj__Java__lang__Object____obj__Java__lang__Object____obj__Java__util__function__BiFunction__ret____obj__Java__lang__Object(Java__lang__Object__Instance, Java__lang__Object__Instance, Java__util__function__BiFunction__Instance) Java__lang__Object__Instance
	Impl__Put__desc____obj__Java__lang__Object____obj__Java__lang__Object__ret____obj__Java__lang__Object(Java__lang__Object__Instance, Java__lang__Object__Instance) Java__lang__Object__Instance
	Impl__PutAll__desc____obj__Java__util__Map__ret__V(Java__util__Map__Instance)
	Impl__PutIfAbsent__desc____obj__Java__lang__Object____obj__Java__lang__Object__ret____obj__Java__lang__Object(Java__lang__Object__Instance, Java__lang__Object__Instance) Java__lang__Object__Instance
	Impl__Remove__desc____obj__Java__lang__Object__ret____obj__Java__lang__Object(Java__lang__Object__Instance) Java__lang__Object__Instance
	Impl__Remove__desc____obj__Java__lang__Object____obj__Java__lang__Object__ret__Z(Java__lang__Object__Instance, Java__lang__Object__Instance) bool
	Impl__Replace__desc____obj__Java__lang__Object____obj__Java__lang__Object__ret____obj__Java__lang__Object(Java__lang__Object__Instance, Java__lang__Object__Instance) Java__lang__Object__Instance
	Impl__Replace__desc____obj__Java__lang__Object____obj__Java__lang__Object____obj__Java__lang__Object__ret__Z(Java__lang__Object__Instance, Java__lang__Object__Instance, Java__lang__Object__Instance) bool
	Impl__ReplaceAll__desc____obj__Java__util__function__BiFunction__ret__V(Java__util__function__BiFunction__Instance)
	Impl__Size__desc____ret__I() int
}

func (this *Java__util__AbstractMap__Impl) Java__util__AbstractMap__InitDispatch(v Java__util__AbstractMap__Dispatch) {
	this.Java__lang__Object__Impl.Java__lang__Object__InitDispatch(v)
	this._dispatch = v
}

func (this *Java__util__AbstractMap__Impl) Clear__desc____ret__V() {
	this._dispatch.Impl__Clear__desc____ret__V()
}

func (this *Java__util__AbstractMap__Impl) Compute__desc____obj__Java__lang__Object____obj__Java__util__function__BiFunction__ret____obj__Java__lang__Object(var0 Java__lang__Object__Instance, var1 Java__util__function__BiFunction__Instance) Java__lang__Object__Instance {
	return this._dispatch.Impl__Compute__desc____obj__Java__lang__Object____obj__Java__util__function__BiFunction__ret____obj__Java__lang__Object(var0, var1)
}

func (this *Java__util__AbstractMap__Impl) ComputeIfAbsent__desc____obj__Java__lang__Object____obj__Java__util__function__Function__ret____obj__Java__lang__Object(var0 Java__lang__Object__Instance, var1 Java__util__function__Function__Instance) Java__lang__Object__Instance {
	return this._dispatch.Impl__ComputeIfAbsent__desc____obj__Java__lang__Object____obj__Java__util__function__Function__ret____obj__Java__lang__Object(var0, var1)
}

func (this *Java__util__AbstractMap__Impl) ComputeIfPresent__desc____obj__Java__lang__Object____obj__Java__util__function__BiFunction__ret____obj__Java__lang__Object(var0 Java__lang__Object__Instance, var1 Java__util__function__BiFunction__Instance) Java__lang__Object__Instance {
	return this._dispatch.Impl__ComputeIfPresent__desc____obj__Java__lang__Object____obj__Java__util__function__BiFunction__ret____obj__Java__lang__Object(var0, var1)
}

func (this *Java__util__AbstractMap__Impl) ContainsKey__desc____obj__Java__lang__Object__ret__Z(var0 Java__lang__Object__Instance) bool {
	return this._dispatch.Impl__ContainsKey__desc____obj__Java__lang__Object__ret__Z(var0)
}

func (this *Java__util__AbstractMap__Impl) ContainsValue__desc____obj__Java__lang__Object__ret__Z(var0 Java__lang__Object__Instance) bool {
	return this._dispatch.Impl__ContainsValue__desc____obj__Java__lang__Object__ret__Z(var0)
}

func (this *Java__util__AbstractMap__Impl) ForEach__desc____obj__Java__util__function__BiConsumer__ret__V(var0 Java__util__function__BiConsumer__Instance) {
	this._dispatch.Impl__ForEach__desc____obj__Java__util__function__BiConsumer__ret__V(var0)
}

func (this *Java__util__AbstractMap__Impl) Get__desc____obj__Java__lang__Object__ret____obj__Java__lang__Object(var0 Java__lang__Object__Instance) Java__lang__Object__Instance {
	return this._dispatch.Impl__Get__desc____obj__Java__lang__Object__ret____obj__Java__lang__Object(var0)
}

func (this *Java__util__AbstractMap__Impl) GetOrDefault__desc____obj__Java__lang__Object____obj__Java__lang__Object__ret____obj__Java__lang__Object(var0 Java__lang__Object__Instance, var1 Java__lang__Object__Instance) Java__lang__Object__Instance {
	return this._dispatch.Impl__GetOrDefault__desc____obj__Java__lang__Object____obj__Java__lang__Object__ret____obj__Java__lang__Object(var0, var1)
}

func (this *Java__util__AbstractMap__Impl) IsEmpty__desc____ret__Z() bool {
	return this._dispatch.Impl__IsEmpty__desc____ret__Z()
}

func (this *Java__util__AbstractMap__Impl) Merge__desc____obj__Java__lang__Object____obj__Java__lang__Object____obj__Java__util__function__BiFunction__ret____obj__Java__lang__Object(var0 Java__lang__Object__Instance, var1 Java__lang__Object__Instance, var2 Java__util__function__BiFunction__Instance) Java__lang__Object__Instance {
	return this._dispatch.Impl__Merge__desc____obj__Java__lang__Object____obj__Java__lang__Object____obj__Java__util__function__BiFunction__ret____obj__Java__lang__Object(var0, var1, var2)
}

func (this *Java__util__AbstractMap__Impl) Put__desc____obj__Java__lang__Object____obj__Java__lang__Object__ret____obj__Java__lang__Object(var0 Java__lang__Object__Instance, var1 Java__lang__Object__Instance) Java__lang__Object__Instance {
	return this._dispatch.Impl__Put__desc____obj__Java__lang__Object____obj__Java__lang__Object__ret____obj__Java__lang__Object(var0, var1)
}

func (this *Java__util__AbstractMap__Impl) PutAll__desc____obj__Java__util__Map__ret__V(var0 Java__util__Map__Instance) {
	this._dispatch.Impl__PutAll__desc____obj__Java__util__Map__ret__V(var0)
}

func (this *Java__util__AbstractMap__Impl) PutIfAbsent__desc____obj__Java__lang__Object____obj__Java__lang__Object__ret____obj__Java__lang__Object(var0 Java__lang__Object__Instance, var1 Java__lang__Object__Instance) Java__lang__Object__Instance {
	return this._dispatch.Impl__PutIfAbsent__desc____obj__Java__lang__Object____obj__Java__lang__Object__ret____obj__Java__lang__Object(var0, var1)
}

func (this *Java__util__AbstractMap__Impl) Remove__desc____obj__Java__lang__Object__ret____obj__Java__lang__Object(var0 Java__lang__Object__Instance) Java__lang__Object__Instance {
	return this._dispatch.Impl__Remove__desc____obj__Java__lang__Object__ret____obj__Java__lang__Object(var0)
}

func (this *Java__util__AbstractMap__Impl) Remove__desc____obj__Java__lang__Object____obj__Java__lang__Object__ret__Z(var0 Java__lang__Object__Instance, var1 Java__lang__Object__Instance) bool {
	return this._dispatch.Impl__Remove__desc____obj__Java__lang__Object____obj__Java__lang__Object__ret__Z(var0, var1)
}

func (this *Java__util__AbstractMap__Impl) Replace__desc____obj__Java__lang__Object____obj__Java__lang__Object__ret____obj__Java__lang__Object(var0 Java__lang__Object__Instance, var1 Java__lang__Object__Instance) Java__lang__Object__Instance {
	return this._dispatch.Impl__Replace__desc____obj__Java__lang__Object____obj__Java__lang__Object__ret____obj__Java__lang__Object(var0, var1)
}

func (this *Java__util__AbstractMap__Impl) Replace__desc____obj__Java__lang__Object____obj__Java__lang__Object____obj__Java__lang__Object__ret__Z(var0 Java__lang__Object__Instance, var1 Java__lang__Object__Instance, var2 Java__lang__Object__Instance) bool {
	return this._dispatch.Impl__Replace__desc____obj__Java__lang__Object____obj__Java__lang__Object____obj__Java__lang__Object__ret__Z(var0, var1, var2)
}

func (this *Java__util__AbstractMap__Impl) ReplaceAll__desc____obj__Java__util__function__BiFunction__ret__V(var0 Java__util__function__BiFunction__Instance) {
	this._dispatch.Impl__ReplaceAll__desc____obj__Java__util__function__BiFunction__ret__V(var0)
}

func (this *Java__util__AbstractMap__Impl) Size__desc____ret__I() int {
	return this._dispatch.Impl__Size__desc____ret__I()
}

type Java__util__AbstractMap__Instance interface {
	PutAll__desc____obj__Java__util__Map__ret__V(Java__util__Map__Instance)
	PutIfAbsent__desc____obj__Java__lang__Object____obj__Java__lang__Object__ret____obj__Java__lang__Object(Java__lang__Object__Instance, Java__lang__Object__Instance) Java__lang__Object__Instance
	GetClass__desc____ret____obj__Java__lang__Class() Java__lang__Class__Instance
	Get__desc____obj__Java__lang__Object__ret____obj__Java__lang__Object(Java__lang__Object__Instance) Java__lang__Object__Instance
	Compute__desc____obj__Java__lang__Object____obj__Java__util__function__BiFunction__ret____obj__Java__lang__Object(Java__lang__Object__Instance, Java__util__function__BiFunction__Instance) Java__lang__Object__Instance
	ComputeIfAbsent__desc____obj__Java__lang__Object____obj__Java__util__function__Function__ret____obj__Java__lang__Object(Java__lang__Object__Instance, Java__util__function__Function__Instance) Java__lang__Object__Instance
	Finalize__desc____ret__V()
	ContainsValue__desc____obj__Java__lang__Object__ret__Z(Java__lang__Object__Instance) bool
	NotifyAll__desc____ret__V()
	Wait__desc____ret__V()
	GetOrDefault__desc____obj__Java__lang__Object____obj__Java__lang__Object__ret____obj__Java__lang__Object(Java__lang__Object__Instance, Java__lang__Object__Instance) Java__lang__Object__Instance
	HashCode__desc____ret__I() int
	Clear__desc____ret__V()
	ReplaceAll__desc____obj__Java__util__function__BiFunction__ret__V(Java__util__function__BiFunction__Instance)
	Merge__desc____obj__Java__lang__Object____obj__Java__lang__Object____obj__Java__util__function__BiFunction__ret____obj__Java__lang__Object(Java__lang__Object__Instance, Java__lang__Object__Instance, Java__util__function__BiFunction__Instance) Java__lang__Object__Instance
	Remove__desc____obj__Java__lang__Object____obj__Java__lang__Object__ret__Z(Java__lang__Object__Instance, Java__lang__Object__Instance) bool
	ForEach__desc____obj__Java__util__function__BiConsumer__ret__V(Java__util__function__BiConsumer__Instance)
	ContainsKey__desc____obj__Java__lang__Object__ret__Z(Java__lang__Object__Instance) bool
	IsEmpty__desc____ret__Z() bool
	Put__desc____obj__Java__lang__Object____obj__Java__lang__Object__ret____obj__Java__lang__Object(Java__lang__Object__Instance, Java__lang__Object__Instance) Java__lang__Object__Instance
	Remove__desc____obj__Java__lang__Object__ret____obj__Java__lang__Object(Java__lang__Object__Instance) Java__lang__Object__Instance
	Wait__desc__J__I__ret__V(int64, int)
	Size__desc____ret__I() int
	Clone__desc____ret____obj__Java__lang__Object() Java__lang__Object__Instance
	Wait__desc__J__ret__V(int64)
	ComputeIfPresent__desc____obj__Java__lang__Object____obj__Java__util__function__BiFunction__ret____obj__Java__lang__Object(Java__lang__Object__Instance, Java__util__function__BiFunction__Instance) Java__lang__Object__Instance
	Equals__desc____obj__Java__lang__Object__ret__Z(Java__lang__Object__Instance) bool
	Replace__desc____obj__Java__lang__Object____obj__Java__lang__Object__ret____obj__Java__lang__Object(Java__lang__Object__Instance, Java__lang__Object__Instance) Java__lang__Object__Instance
	Notify__desc____ret__V()
	Replace__desc____obj__Java__lang__Object____obj__Java__lang__Object____obj__Java__lang__Object__ret__Z(Java__lang__Object__Instance, Java__lang__Object__Instance, Java__lang__Object__Instance) bool
	ToString__desc____ret____obj__Java__lang__String() Java__lang__String__Instance
	RawPtr__Java__util__AbstractMap() *Java__util__AbstractMap__Impl
	RawPtr__Java__lang__Object() *Java__lang__Object__Impl
}

type Java__util__AbstractMap__Impl struct {
	*Java__lang__Object__Impl
	_dispatch Java__util__AbstractMap__Dispatch
}

func (this *Java__util__AbstractMap__Impl) Impl__Instance_Init__desc____ret__V() {
	panic("Method not implemented - java/util/AbstractMap.<init>()V")
}

func (this *Java__util__AbstractMap__Impl) Impl__Clear__desc____ret__V() {
	panic("Method not implemented - java/util/AbstractMap.clear()V")
}

func (this *Java__util__AbstractMap__Impl) Impl__Clone__desc____ret____obj__Java__lang__Object() Java__lang__Object__Instance {
	panic("Method not implemented - java/util/AbstractMap.clone()Ljava/lang/Object;")
}

func (this *Java__util__AbstractMap__Impl) Impl__ContainsKey__desc____obj__Java__lang__Object__ret__Z(var0 Java__lang__Object__Instance) bool {
	panic("Method not implemented - java/util/AbstractMap.containsKey(Ljava/lang/Object;)Z")
}

func (this *Java__util__AbstractMap__Impl) Impl__ContainsValue__desc____obj__Java__lang__Object__ret__Z(var0 Java__lang__Object__Instance) bool {
	panic("Method not implemented - java/util/AbstractMap.containsValue(Ljava/lang/Object;)Z")
}

func (this *Java__util__AbstractMap__Impl) Impl__Equals__desc____obj__Java__lang__Object__ret__Z(var0 Java__lang__Object__Instance) bool {
	panic("Method not implemented - java/util/AbstractMap.equals(Ljava/lang/Object;)Z")
}

func (this *Java__util__AbstractMap__Impl) Impl__Get__desc____obj__Java__lang__Object__ret____obj__Java__lang__Object(var0 Java__lang__Object__Instance) Java__lang__Object__Instance {
	panic("Method not implemented - java/util/AbstractMap.get(Ljava/lang/Object;)Ljava/lang/Object;")
}

func (this *Java__util__AbstractMap__Impl) Impl__HashCode__desc____ret__I() int {
	panic("Method not implemented - java/util/AbstractMap.hashCode()I")
}

func (this *Java__util__AbstractMap__Impl) Impl__IsEmpty__desc____ret__Z() bool {
	panic("Method not implemented - java/util/AbstractMap.isEmpty()Z")
}

func (this *Java__util__AbstractMap__Impl) Impl__Put__desc____obj__Java__lang__Object____obj__Java__lang__Object__ret____obj__Java__lang__Object(var0 Java__lang__Object__Instance, var1 Java__lang__Object__Instance) Java__lang__Object__Instance {
	panic("Method not implemented - java/util/AbstractMap.put(Ljava/lang/Object;Ljava/lang/Object;)Ljava/lang/Object;")
}

func (this *Java__util__AbstractMap__Impl) Impl__PutAll__desc____obj__Java__util__Map__ret__V(var0 Java__util__Map__Instance) {
	panic("Method not implemented - java/util/AbstractMap.putAll(Ljava/util/Map;)V")
}

func (this *Java__util__AbstractMap__Impl) Impl__Remove__desc____obj__Java__lang__Object__ret____obj__Java__lang__Object(var0 Java__lang__Object__Instance) Java__lang__Object__Instance {
	panic("Method not implemented - java/util/AbstractMap.remove(Ljava/lang/Object;)Ljava/lang/Object;")
}

func (this *Java__util__AbstractMap__Impl) Impl__Size__desc____ret__I() int {
	panic("Method not implemented - java/util/AbstractMap.size()I")
}

func (this *Java__util__AbstractMap__Impl) Impl__ToString__desc____ret____obj__Java__lang__String() Java__lang__String__Instance {
	panic("Method not implemented - java/util/AbstractMap.toString()Ljava/lang/String;")
}

func (this *Java__util__AbstractMap__Impl) RawPtr__Java__util__AbstractMap() *Java__util__AbstractMap__Impl {
	return this
}

func (this *Java__util__AbstractMap__Impl) Impl_Self() Java__lang__Object__Instance {
	return this
}

func (this *Java__util__AbstractMap__Impl) Impl__Compute__desc____obj__Java__lang__Object____obj__Java__util__function__BiFunction__ret____obj__Java__lang__Object(var0 Java__lang__Object__Instance, var1 Java__util__function__BiFunction__Instance) Java__lang__Object__Instance {
	return Java__util__Map__defaultmethod__Compute__desc____obj__Java__lang__Object____obj__Java__util__function__BiFunction__ret____obj__Java__lang__Object(this, var0, var1)
}

func (this *Java__util__AbstractMap__Impl) Impl__ComputeIfAbsent__desc____obj__Java__lang__Object____obj__Java__util__function__Function__ret____obj__Java__lang__Object(var0 Java__lang__Object__Instance, var1 Java__util__function__Function__Instance) Java__lang__Object__Instance {
	return Java__util__Map__defaultmethod__ComputeIfAbsent__desc____obj__Java__lang__Object____obj__Java__util__function__Function__ret____obj__Java__lang__Object(this, var0, var1)
}

func (this *Java__util__AbstractMap__Impl) Impl__ComputeIfPresent__desc____obj__Java__lang__Object____obj__Java__util__function__BiFunction__ret____obj__Java__lang__Object(var0 Java__lang__Object__Instance, var1 Java__util__function__BiFunction__Instance) Java__lang__Object__Instance {
	return Java__util__Map__defaultmethod__ComputeIfPresent__desc____obj__Java__lang__Object____obj__Java__util__function__BiFunction__ret____obj__Java__lang__Object(this, var0, var1)
}

func (this *Java__util__AbstractMap__Impl) Impl__ForEach__desc____obj__Java__util__function__BiConsumer__ret__V(var0 Java__util__function__BiConsumer__Instance) {
	Java__util__Map__defaultmethod__ForEach__desc____obj__Java__util__function__BiConsumer__ret__V(this, var0)
}

func (this *Java__util__AbstractMap__Impl) Impl__GetOrDefault__desc____obj__Java__lang__Object____obj__Java__lang__Object__ret____obj__Java__lang__Object(var0 Java__lang__Object__Instance, var1 Java__lang__Object__Instance) Java__lang__Object__Instance {
	return Java__util__Map__defaultmethod__GetOrDefault__desc____obj__Java__lang__Object____obj__Java__lang__Object__ret____obj__Java__lang__Object(this, var0, var1)
}

func (this *Java__util__AbstractMap__Impl) Impl__Merge__desc____obj__Java__lang__Object____obj__Java__lang__Object____obj__Java__util__function__BiFunction__ret____obj__Java__lang__Object(var0 Java__lang__Object__Instance, var1 Java__lang__Object__Instance, var2 Java__util__function__BiFunction__Instance) Java__lang__Object__Instance {
	return Java__util__Map__defaultmethod__Merge__desc____obj__Java__lang__Object____obj__Java__lang__Object____obj__Java__util__function__BiFunction__ret____obj__Java__lang__Object(this, var0, var1, var2)
}

func (this *Java__util__AbstractMap__Impl) Impl__PutIfAbsent__desc____obj__Java__lang__Object____obj__Java__lang__Object__ret____obj__Java__lang__Object(var0 Java__lang__Object__Instance, var1 Java__lang__Object__Instance) Java__lang__Object__Instance {
	return Java__util__Map__defaultmethod__PutIfAbsent__desc____obj__Java__lang__Object____obj__Java__lang__Object__ret____obj__Java__lang__Object(this, var0, var1)
}

func (this *Java__util__AbstractMap__Impl) Impl__Remove__desc____obj__Java__lang__Object____obj__Java__lang__Object__ret__Z(var0 Java__lang__Object__Instance, var1 Java__lang__Object__Instance) bool {
	return Java__util__Map__defaultmethod__Remove__desc____obj__Java__lang__Object____obj__Java__lang__Object__ret__Z(this, var0, var1)
}

func (this *Java__util__AbstractMap__Impl) Impl__Replace__desc____obj__Java__lang__Object____obj__Java__lang__Object__ret____obj__Java__lang__Object(var0 Java__lang__Object__Instance, var1 Java__lang__Object__Instance) Java__lang__Object__Instance {
	return Java__util__Map__defaultmethod__Replace__desc____obj__Java__lang__Object____obj__Java__lang__Object__ret____obj__Java__lang__Object(this, var0, var1)
}

func (this *Java__util__AbstractMap__Impl) Impl__Replace__desc____obj__Java__lang__Object____obj__Java__lang__Object____obj__Java__lang__Object__ret__Z(var0 Java__lang__Object__Instance, var1 Java__lang__Object__Instance, var2 Java__lang__Object__Instance) bool {
	return Java__util__Map__defaultmethod__Replace__desc____obj__Java__lang__Object____obj__Java__lang__Object____obj__Java__lang__Object__ret__Z(this, var0, var1, var2)
}

func (this *Java__util__AbstractMap__Impl) Impl__ReplaceAll__desc____obj__Java__util__function__BiFunction__ret__V(var0 Java__util__function__BiFunction__Instance) {
	Java__util__Map__defaultmethod__ReplaceAll__desc____obj__Java__util__function__BiFunction__ret__V(this, var0)
}

type Java__util__Comparator__Static struct{}

var Java__util__Comparator__Var Java__util__Comparator__Static

func Java__util__Comparator() *Java__util__Comparator__Static {
	return &Java__util__Comparator__Var
}

func (this *Java__util__Comparator__Static) Impl__Comparing__desc____obj__Java__util__function__Function__ret____obj__Java__util__Comparator(var0 Java__util__function__Function__Instance) Java__util__Comparator__Instance {
	panic("Method not implemented - java/util/Comparator.comparing(Ljava/util/function/Function;)Ljava/util/Comparator;")
}

func (this *Java__util__Comparator__Static) Impl__Comparing__desc____obj__Java__util__function__Function____obj__Java__util__Comparator__ret____obj__Java__util__Comparator(var0 Java__util__function__Function__Instance, var1 Java__util__Comparator__Instance) Java__util__Comparator__Instance {
	panic("Method not implemented - java/util/Comparator.comparing(Ljava/util/function/Function;Ljava/util/Comparator;)Ljava/util/Comparator;")
}

func (this *Java__util__Comparator__Static) Impl__NaturalOrder__desc____ret____obj__Java__util__Comparator() Java__util__Comparator__Instance {
	panic("Method not implemented - java/util/Comparator.naturalOrder()Ljava/util/Comparator;")
}

func (this *Java__util__Comparator__Static) Impl__NullsFirst__desc____obj__Java__util__Comparator__ret____obj__Java__util__Comparator(var0 Java__util__Comparator__Instance) Java__util__Comparator__Instance {
	panic("Method not implemented - java/util/Comparator.nullsFirst(Ljava/util/Comparator;)Ljava/util/Comparator;")
}

func (this *Java__util__Comparator__Static) Impl__NullsLast__desc____obj__Java__util__Comparator__ret____obj__Java__util__Comparator(var0 Java__util__Comparator__Instance) Java__util__Comparator__Instance {
	panic("Method not implemented - java/util/Comparator.nullsLast(Ljava/util/Comparator;)Ljava/util/Comparator;")
}

func (this *Java__util__Comparator__Static) Impl__ReverseOrder__desc____ret____obj__Java__util__Comparator() Java__util__Comparator__Instance {
	panic("Method not implemented - java/util/Comparator.reverseOrder()Ljava/util/Comparator;")
}

type Java__util__Comparator__Instance interface {
	GetClass__desc____ret____obj__Java__lang__Class() Java__lang__Class__Instance
	Finalize__desc____ret__V()
	ThenComparing__desc____obj__Java__util__Comparator__ret____obj__Java__util__Comparator(Java__util__Comparator__Instance) Java__util__Comparator__Instance
	NotifyAll__desc____ret__V()
	Wait__desc____ret__V()
	HashCode__desc____ret__I() int
	ThenComparing__desc____obj__Java__util__function__Function__ret____obj__Java__util__Comparator(Java__util__function__Function__Instance) Java__util__Comparator__Instance
	ThenComparing__desc____obj__Java__util__function__Function____obj__Java__util__Comparator__ret____obj__Java__util__Comparator(Java__util__function__Function__Instance, Java__util__Comparator__Instance) Java__util__Comparator__Instance
	Reversed__desc____ret____obj__Java__util__Comparator() Java__util__Comparator__Instance
	Compare__desc____obj__Java__lang__Object____obj__Java__lang__Object__ret__I(Java__lang__Object__Instance, Java__lang__Object__Instance) int
	Wait__desc__J__I__ret__V(int64, int)
	Clone__desc____ret____obj__Java__lang__Object() Java__lang__Object__Instance
	Wait__desc__J__ret__V(int64)
	Equals__desc____obj__Java__lang__Object__ret__Z(Java__lang__Object__Instance) bool
	Notify__desc____ret__V()
	ToString__desc____ret____obj__Java__lang__String() Java__lang__String__Instance
	RawPtr__Java__lang__Object() *Java__lang__Object__Impl
}

func Java__util__Comparator__defaultmethod__Reversed__desc____ret____obj__Java__util__Comparator(this Java__util__Comparator__Instance) Java__util__Comparator__Instance {
	panic("Method not implemented - java/util/Comparator.reversed()Ljava/util/Comparator;")
}

func Java__util__Comparator__defaultmethod__ThenComparing__desc____obj__Java__util__Comparator__ret____obj__Java__util__Comparator(this Java__util__Comparator__Instance, var0 Java__util__Comparator__Instance) Java__util__Comparator__Instance {
	panic("Method not implemented - java/util/Comparator.thenComparing(Ljava/util/Comparator;)Ljava/util/Comparator;")
}

func Java__util__Comparator__defaultmethod__ThenComparing__desc____obj__Java__util__function__Function__ret____obj__Java__util__Comparator(this Java__util__Comparator__Instance, var0 Java__util__function__Function__Instance) Java__util__Comparator__Instance {
	panic("Method not implemented - java/util/Comparator.thenComparing(Ljava/util/function/Function;)Ljava/util/Comparator;")
}

func Java__util__Comparator__defaultmethod__ThenComparing__desc____obj__Java__util__function__Function____obj__Java__util__Comparator__ret____obj__Java__util__Comparator(this Java__util__Comparator__Instance, var0 Java__util__function__Function__Instance, var1 Java__util__Comparator__Instance) Java__util__Comparator__Instance {
	panic("Method not implemented - java/util/Comparator.thenComparing(Ljava/util/function/Function;Ljava/util/Comparator;)Ljava/util/Comparator;")
}

type Java__util__Comparator__dynproxy____Static struct{}

var Java__util__Comparator__dynproxy____Var Java__util__Comparator__dynproxy____Static

func Java__util__Comparator__dynproxy__() *Java__util__Comparator__dynproxy____Static {
	return &Java__util__Comparator__dynproxy____Var
}

func (this *Java__util__Comparator__dynproxy____Static) New() *Java__util__Comparator__dynproxy____Impl {
	v := &Java__util__Comparator__dynproxy____Impl{
		Java__lang__Object__Impl: Java__lang__Object().New(),
	}
	v.Java__util__Comparator__dynproxy____InitDispatch(v)
	return v
}

type Java__util__Comparator__dynproxy____Dispatch interface {
	Java__lang__Object__Dispatch
	Impl__Compare__desc____obj__Java__lang__Object____obj__Java__lang__Object__ret__I(Java__lang__Object__Instance, Java__lang__Object__Instance) int
	Impl__Reversed__desc____ret____obj__Java__util__Comparator() Java__util__Comparator__Instance
	Impl__ThenComparing__desc____obj__Java__util__Comparator__ret____obj__Java__util__Comparator(Java__util__Comparator__Instance) Java__util__Comparator__Instance
	Impl__ThenComparing__desc____obj__Java__util__function__Function__ret____obj__Java__util__Comparator(Java__util__function__Function__Instance) Java__util__Comparator__Instance
	Impl__ThenComparing__desc____obj__Java__util__function__Function____obj__Java__util__Comparator__ret____obj__Java__util__Comparator(Java__util__function__Function__Instance, Java__util__Comparator__Instance) Java__util__Comparator__Instance
}

func (this *Java__util__Comparator__dynproxy____Impl) Java__util__Comparator__dynproxy____InitDispatch(v Java__util__Comparator__dynproxy____Dispatch) {
	this.Java__lang__Object__Impl.Java__lang__Object__InitDispatch(v)
	this._dispatch = v
}

func (this *Java__util__Comparator__dynproxy____Impl) Compare__desc____obj__Java__lang__Object____obj__Java__lang__Object__ret__I(var0 Java__lang__Object__Instance, var1 Java__lang__Object__Instance) int {
	return this._dispatch.Impl__Compare__desc____obj__Java__lang__Object____obj__Java__lang__Object__ret__I(var0, var1)
}

func (this *Java__util__Comparator__dynproxy____Impl) Reversed__desc____ret____obj__Java__util__Comparator() Java__util__Comparator__Instance {
	return this._dispatch.Impl__Reversed__desc____ret____obj__Java__util__Comparator()
}

func (this *Java__util__Comparator__dynproxy____Impl) ThenComparing__desc____obj__Java__util__Comparator__ret____obj__Java__util__Comparator(var0 Java__util__Comparator__Instance) Java__util__Comparator__Instance {
	return this._dispatch.Impl__ThenComparing__desc____obj__Java__util__Comparator__ret____obj__Java__util__Comparator(var0)
}

func (this *Java__util__Comparator__dynproxy____Impl) ThenComparing__desc____obj__Java__util__function__Function__ret____obj__Java__util__Comparator(var0 Java__util__function__Function__Instance) Java__util__Comparator__Instance {
	return this._dispatch.Impl__ThenComparing__desc____obj__Java__util__function__Function__ret____obj__Java__util__Comparator(var0)
}

func (this *Java__util__Comparator__dynproxy____Impl) ThenComparing__desc____obj__Java__util__function__Function____obj__Java__util__Comparator__ret____obj__Java__util__Comparator(var0 Java__util__function__Function__Instance, var1 Java__util__Comparator__Instance) Java__util__Comparator__Instance {
	return this._dispatch.Impl__ThenComparing__desc____obj__Java__util__function__Function____obj__Java__util__Comparator__ret____obj__Java__util__Comparator(var0, var1)
}

type Java__util__Comparator__dynproxy____Instance interface {
	GetClass__desc____ret____obj__Java__lang__Class() Java__lang__Class__Instance
	Finalize__desc____ret__V()
	ThenComparing__desc____obj__Java__util__Comparator__ret____obj__Java__util__Comparator(Java__util__Comparator__Instance) Java__util__Comparator__Instance
	NotifyAll__desc____ret__V()
	Wait__desc____ret__V()
	HashCode__desc____ret__I() int
	ThenComparing__desc____obj__Java__util__function__Function__ret____obj__Java__util__Comparator(Java__util__function__Function__Instance) Java__util__Comparator__Instance
	ThenComparing__desc____obj__Java__util__function__Function____obj__Java__util__Comparator__ret____obj__Java__util__Comparator(Java__util__function__Function__Instance, Java__util__Comparator__Instance) Java__util__Comparator__Instance
	Reversed__desc____ret____obj__Java__util__Comparator() Java__util__Comparator__Instance
	Compare__desc____obj__Java__lang__Object____obj__Java__lang__Object__ret__I(Java__lang__Object__Instance, Java__lang__Object__Instance) int
	Wait__desc__J__I__ret__V(int64, int)
	Clone__desc____ret____obj__Java__lang__Object() Java__lang__Object__Instance
	Wait__desc__J__ret__V(int64)
	Equals__desc____obj__Java__lang__Object__ret__Z(Java__lang__Object__Instance) bool
	Notify__desc____ret__V()
	ToString__desc____ret____obj__Java__lang__String() Java__lang__String__Instance
	RawPtr__Java__util__Comparator__dynproxy__() *Java__util__Comparator__dynproxy____Impl
	RawPtr__Java__lang__Object() *Java__lang__Object__Impl
}

type Java__util__Comparator__dynproxy____Impl struct {
	*Java__lang__Object__Impl
	_dispatch Java__util__Comparator__dynproxy____Dispatch
	fn        func(Java__lang__Object__Instance, Java__lang__Object__Instance) int
}

func (this *Java__util__Comparator__dynproxy____Impl) RawPtr__Java__util__Comparator__dynproxy__() *Java__util__Comparator__dynproxy____Impl {
	return this
}

func (this *Java__util__Comparator__dynproxy____Impl) Impl_Self() Java__lang__Object__Instance {
	return this
}

func (this *Java__util__Comparator__dynproxy____Impl) Impl__Reversed__desc____ret____obj__Java__util__Comparator() Java__util__Comparator__Instance {
	return Java__util__Comparator__defaultmethod__Reversed__desc____ret____obj__Java__util__Comparator(this)
}

func (this *Java__util__Comparator__dynproxy____Impl) Impl__ThenComparing__desc____obj__Java__util__Comparator__ret____obj__Java__util__Comparator(var0 Java__util__Comparator__Instance) Java__util__Comparator__Instance {
	return Java__util__Comparator__defaultmethod__ThenComparing__desc____obj__Java__util__Comparator__ret____obj__Java__util__Comparator(this, var0)
}

func (this *Java__util__Comparator__dynproxy____Impl) Impl__ThenComparing__desc____obj__Java__util__function__Function__ret____obj__Java__util__Comparator(var0 Java__util__function__Function__Instance) Java__util__Comparator__Instance {
	return Java__util__Comparator__defaultmethod__ThenComparing__desc____obj__Java__util__function__Function__ret____obj__Java__util__Comparator(this, var0)
}

func (this *Java__util__Comparator__dynproxy____Impl) Impl__ThenComparing__desc____obj__Java__util__function__Function____obj__Java__util__Comparator__ret____obj__Java__util__Comparator(var0 Java__util__function__Function__Instance, var1 Java__util__Comparator__Instance) Java__util__Comparator__Instance {
	return Java__util__Comparator__defaultmethod__ThenComparing__desc____obj__Java__util__function__Function____obj__Java__util__Comparator__ret____obj__Java__util__Comparator(this, var0, var1)
}

func (_ *Java__util__Comparator__Static) DynProxy_Create(fn func(Java__lang__Object__Instance, Java__lang__Object__Instance) int) Java__util__Comparator__Instance {
	v := &Java__util__Comparator__dynproxy____Impl{
		Java__lang__Object__Impl: Java__lang__Object().New(),
		fn:                       fn,
	}
	v.Java__util__Comparator__dynproxy____InitDispatch(v)
	v.Java__lang__Object__Impl.Impl__Instance_Init__desc____ret__V()
	return v
}

func (this *Java__util__Comparator__dynproxy____Impl) Impl__Compare__desc____obj__Java__lang__Object____obj__Java__lang__Object__ret__I(var0 Java__lang__Object__Instance, var1 Java__lang__Object__Instance) int {
	return this.fn(var0, var1)
}

type Java__util__Locale__innerclass__Category__Static struct {
	DISPLAY Java__util__Locale__innerclass__Category__Instance
	FORMAT  Java__util__Locale__innerclass__Category__Instance
	init    sync.Once
}

var Java__util__Locale__innerclass__Category__Var Java__util__Locale__innerclass__Category__Static

func Java__util__Locale__innerclass__Category() *Java__util__Locale__innerclass__Category__Static {
	Java__util__Locale__innerclass__Category__Var.init.Do(Java__util__Locale__innerclass__Category__Var.Impl__Static_Init__desc____ret__V)
	return &Java__util__Locale__innerclass__Category__Var
}

func (this *Java__util__Locale__innerclass__Category__Static) New() *Java__util__Locale__innerclass__Category__Impl {
	v := &Java__util__Locale__innerclass__Category__Impl{
		Java__lang__Enum__Impl: Java__lang__Enum().New(),
	}
	v.Java__util__Locale__innerclass__Category__InitDispatch(v)
	return v
}

func (this *Java__util__Locale__innerclass__Category__Static) Impl__Static_Init__desc____ret__V() { }

func (this *Java__util__Locale__innerclass__Category__Static) Impl__ValueOf__desc____obj__Java__lang__String__ret____obj__Java__util__Locale__innerclass__Category(var0 Java__lang__String__Instance) Java__util__Locale__innerclass__Category__Instance {
	panic("Method not implemented - java/util/Locale$Category.valueOf(Ljava/lang/String;)Ljava/util/Locale$Category;")
}

func (this *Java__util__Locale__innerclass__Category__Static) Impl__Values__desc____ret____arr____obj__Java__util__Locale__innerclass__Category() ObjectArray__Instance {
	panic("Method not implemented - java/util/Locale$Category.values()[Ljava/util/Locale$Category;")
}

type Java__util__Locale__innerclass__Category__Dispatch interface {
	Java__lang__Enum__Dispatch
}

func (this *Java__util__Locale__innerclass__Category__Impl) Java__util__Locale__innerclass__Category__InitDispatch(v Java__util__Locale__innerclass__Category__Dispatch) {
	this.Java__lang__Enum__Impl.Java__lang__Enum__InitDispatch(v)
	this._dispatch = v
}

type Java__util__Locale__innerclass__Category__Instance interface {
	GetClass__desc____ret____obj__Java__lang__Class() Java__lang__Class__Instance
	CompareTo__desc____obj__Java__lang__Enum__ret__I(Java__lang__Enum__Instance) int
	Ordinal__desc____ret__I() int
	Finalize__desc____ret__V()
	CompareTo__desc____obj__Java__lang__Object__ret__I(Java__lang__Object__Instance) int
	NotifyAll__desc____ret__V()
	Wait__desc____ret__V()
	HashCode__desc____ret__I() int
	GetDeclaringClass__desc____ret____obj__Java__lang__Class() Java__lang__Class__Instance
	Wait__desc__J__I__ret__V(int64, int)
	Name__desc____ret____obj__Java__lang__String() Java__lang__String__Instance
	Clone__desc____ret____obj__Java__lang__Object() Java__lang__Object__Instance
	Wait__desc__J__ret__V(int64)
	Equals__desc____obj__Java__lang__Object__ret__Z(Java__lang__Object__Instance) bool
	Notify__desc____ret__V()
	ToString__desc____ret____obj__Java__lang__String() Java__lang__String__Instance
	FieldGet__Java__util__Locale__innerclass__Category__CountryKey() Java__lang__String__Instance
	FieldSet__Java__util__Locale__innerclass__Category__CountryKey(v Java__lang__String__Instance)
	FieldGet__Java__util__Locale__innerclass__Category__LanguageKey() Java__lang__String__Instance
	FieldSet__Java__util__Locale__innerclass__Category__LanguageKey(v Java__lang__String__Instance)
	FieldGet__Java__util__Locale__innerclass__Category__ScriptKey() Java__lang__String__Instance
	FieldSet__Java__util__Locale__innerclass__Category__ScriptKey(v Java__lang__String__Instance)
	FieldGet__Java__util__Locale__innerclass__Category__VariantKey() Java__lang__String__Instance
	FieldSet__Java__util__Locale__innerclass__Category__VariantKey(v Java__lang__String__Instance)
	RawPtr__Java__util__Locale__innerclass__Category() *Java__util__Locale__innerclass__Category__Impl
	RawPtr__Java__lang__Enum() *Java__lang__Enum__Impl
	RawPtr__Java__lang__Object() *Java__lang__Object__Impl
}

type Java__util__Locale__innerclass__Category__Impl struct {
	*Java__lang__Enum__Impl
	_dispatch   Java__util__Locale__innerclass__Category__Dispatch
	CountryKey  Java__lang__String__Instance
	LanguageKey Java__lang__String__Instance
	ScriptKey   Java__lang__String__Instance
	VariantKey  Java__lang__String__Instance
}

func (this *Java__util__Locale__innerclass__Category__Impl) FieldGet__Java__util__Locale__innerclass__Category__CountryKey() Java__lang__String__Instance {
	return this.CountryKey
}

func (this *Java__util__Locale__innerclass__Category__Impl) FieldSet__Java__util__Locale__innerclass__Category__CountryKey(v Java__lang__String__Instance) {
	this.CountryKey = v
}

func (this *Java__util__Locale__innerclass__Category__Impl) FieldGet__Java__util__Locale__innerclass__Category__LanguageKey() Java__lang__String__Instance {
	return this.LanguageKey
}

func (this *Java__util__Locale__innerclass__Category__Impl) FieldSet__Java__util__Locale__innerclass__Category__LanguageKey(v Java__lang__String__Instance) {
	this.LanguageKey = v
}

func (this *Java__util__Locale__innerclass__Category__Impl) FieldGet__Java__util__Locale__innerclass__Category__ScriptKey() Java__lang__String__Instance {
	return this.ScriptKey
}

func (this *Java__util__Locale__innerclass__Category__Impl) FieldSet__Java__util__Locale__innerclass__Category__ScriptKey(v Java__lang__String__Instance) {
	this.ScriptKey = v
}

func (this *Java__util__Locale__innerclass__Category__Impl) FieldGet__Java__util__Locale__innerclass__Category__VariantKey() Java__lang__String__Instance {
	return this.VariantKey
}

func (this *Java__util__Locale__innerclass__Category__Impl) FieldSet__Java__util__Locale__innerclass__Category__VariantKey(v Java__lang__String__Instance) {
	this.VariantKey = v
}

func (this *Java__util__Locale__innerclass__Category__Impl) RawPtr__Java__util__Locale__innerclass__Category() *Java__util__Locale__innerclass__Category__Impl {
	return this
}

func (this *Java__util__Locale__innerclass__Category__Impl) Impl_Self() Java__lang__Object__Instance {
	return this
}

type Java__util__Map__Static struct{}

var Java__util__Map__Var Java__util__Map__Static

func Java__util__Map() *Java__util__Map__Static {
	return &Java__util__Map__Var
}

func (this *Java__util__Map__Static) Impl__Entry__desc____obj__Java__lang__Object____obj__Java__lang__Object__ret____obj__Java__util__Map__innerclass__Entry(var0 Java__lang__Object__Instance, var1 Java__lang__Object__Instance) Java__util__Map__innerclass__Entry__Instance {
	panic("Method not implemented - java/util/Map.entry(Ljava/lang/Object;Ljava/lang/Object;)Ljava/util/Map$Entry;")
}

func (this *Java__util__Map__Static) Impl__Of__desc____ret____obj__Java__util__Map() Java__util__Map__Instance {
	panic("Method not implemented - java/util/Map.of()Ljava/util/Map;")
}

func (this *Java__util__Map__Static) Impl__Of__desc____obj__Java__lang__Object____obj__Java__lang__Object__ret____obj__Java__util__Map(var0 Java__lang__Object__Instance, var1 Java__lang__Object__Instance) Java__util__Map__Instance {
	panic("Method not implemented - java/util/Map.of(Ljava/lang/Object;Ljava/lang/Object;)Ljava/util/Map;")
}

func (this *Java__util__Map__Static) Impl__Of__desc____obj__Java__lang__Object____obj__Java__lang__Object____obj__Java__lang__Object____obj__Java__lang__Object__ret____obj__Java__util__Map(var0 Java__lang__Object__Instance, var1 Java__lang__Object__Instance, var2 Java__lang__Object__Instance, var3 Java__lang__Object__Instance) Java__util__Map__Instance {
	panic("Method not implemented - java/util/Map.of(Ljava/lang/Object;Ljava/lang/Object;Ljava/lang/Object;Ljava/lang/Object;)Ljava/util/Map;")
}

func (this *Java__util__Map__Static) Impl__Of__desc____obj__Java__lang__Object____obj__Java__lang__Object____obj__Java__lang__Object____obj__Java__lang__Object____obj__Java__lang__Object____obj__Java__lang__Object__ret____obj__Java__util__Map(var0 Java__lang__Object__Instance, var1 Java__lang__Object__Instance, var2 Java__lang__Object__Instance, var3 Java__lang__Object__Instance, var4 Java__lang__Object__Instance, var5 Java__lang__Object__Instance) Java__util__Map__Instance {
	panic("Method not implemented - java/util/Map.of(Ljava/lang/Object;Ljava/lang/Object;Ljava/lang/Object;Ljava/lang/Object;Ljava/lang/Object;Ljava/lang/Object;)Ljava/util/Map;")
}

func (this *Java__util__Map__Static) Impl__Of__desc____obj__Java__lang__Object____obj__Java__lang__Object____obj__Java__lang__Object____obj__Java__lang__Object____obj__Java__lang__Object____obj__Java__lang__Object____obj__Java__lang__Object____obj__Java__lang__Object__ret____obj__Java__util__Map(var0 Java__lang__Object__Instance, var1 Java__lang__Object__Instance, var2 Java__lang__Object__Instance, var3 Java__lang__Object__Instance, var4 Java__lang__Object__Instance, var5 Java__lang__Object__Instance, var6 Java__lang__Object__Instance, var7 Java__lang__Object__Instance) Java__util__Map__Instance {
	panic("Method not implemented - java/util/Map.of(Ljava/lang/Object;Ljava/lang/Object;Ljava/lang/Object;Ljava/lang/Object;Ljava/lang/Object;Ljava/lang/Object;Ljava/lang/Object;Ljava/lang/Object;)Ljava/util/Map;")
}

func (this *Java__util__Map__Static) Impl__Of__desc____obj__Java__lang__Object____obj__Java__lang__Object____obj__Java__lang__Object____obj__Java__lang__Object____obj__Java__lang__Object____obj__Java__lang__Object____obj__Java__lang__Object____obj__Java__lang__Object____obj__Java__lang__Object____obj__Java__lang__Object__ret____obj__Java__util__Map(var0 Java__lang__Object__Instance, var1 Java__lang__Object__Instance, var2 Java__lang__Object__Instance, var3 Java__lang__Object__Instance, var4 Java__lang__Object__Instance, var5 Java__lang__Object__Instance, var6 Java__lang__Object__Instance, var7 Java__lang__Object__Instance, var8 Java__lang__Object__Instance, var9 Java__lang__Object__Instance) Java__util__Map__Instance {
	panic("Method not implemented - java/util/Map.of(Ljava/lang/Object;Ljava/lang/Object;Ljava/lang/Object;Ljava/lang/Object;Ljava/lang/Object;Ljava/lang/Object;Ljava/lang/Object;Ljava/lang/Object;Ljava/lang/Object;Ljava/lang/Object;)Ljava/util/Map;")
}

func (this *Java__util__Map__Static) Impl__Of__desc____obj__Java__lang__Object____obj__Java__lang__Object____obj__Java__lang__Object____obj__Java__lang__Object____obj__Java__lang__Object____obj__Java__lang__Object____obj__Java__lang__Object____obj__Java__lang__Object____obj__Java__lang__Object____obj__Java__lang__Object____obj__Java__lang__Object____obj__Java__lang__Object__ret____obj__Java__util__Map(var0 Java__lang__Object__Instance, var1 Java__lang__Object__Instance, var2 Java__lang__Object__Instance, var3 Java__lang__Object__Instance, var4 Java__lang__Object__Instance, var5 Java__lang__Object__Instance, var6 Java__lang__Object__Instance, var7 Java__lang__Object__Instance, var8 Java__lang__Object__Instance, var9 Java__lang__Object__Instance, var10 Java__lang__Object__Instance, var11 Java__lang__Object__Instance) Java__util__Map__Instance {
	panic("Method not implemented - java/util/Map.of(Ljava/lang/Object;Ljava/lang/Object;Ljava/lang/Object;Ljava/lang/Object;Ljava/lang/Object;Ljava/lang/Object;Ljava/lang/Object;Ljava/lang/Object;Ljava/lang/Object;Ljava/lang/Object;Ljava/lang/Object;Ljava/lang/Object;)Ljava/util/Map;")
}

func (this *Java__util__Map__Static) Impl__Of__desc____obj__Java__lang__Object____obj__Java__lang__Object____obj__Java__lang__Object____obj__Java__lang__Object____obj__Java__lang__Object____obj__Java__lang__Object____obj__Java__lang__Object____obj__Java__lang__Object____obj__Java__lang__Object____obj__Java__lang__Object____obj__Java__lang__Object____obj__Java__lang__Object____obj__Java__lang__Object____obj__Java__lang__Object__ret____obj__Java__util__Map(var0 Java__lang__Object__Instance, var1 Java__lang__Object__Instance, var2 Java__lang__Object__Instance, var3 Java__lang__Object__Instance, var4 Java__lang__Object__Instance, var5 Java__lang__Object__Instance, var6 Java__lang__Object__Instance, var7 Java__lang__Object__Instance, var8 Java__lang__Object__Instance, var9 Java__lang__Object__Instance, var10 Java__lang__Object__Instance, var11 Java__lang__Object__Instance, var12 Java__lang__Object__Instance, var13 Java__lang__Object__Instance) Java__util__Map__Instance {
	panic("Method not implemented - java/util/Map.of(Ljava/lang/Object;Ljava/lang/Object;Ljava/lang/Object;Ljava/lang/Object;Ljava/lang/Object;Ljava/lang/Object;Ljava/lang/Object;Ljava/lang/Object;Ljava/lang/Object;Ljava/lang/Object;Ljava/lang/Object;Ljava/lang/Object;Ljava/lang/Object;Ljava/lang/Object;)Ljava/util/Map;")
}

func (this *Java__util__Map__Static) Impl__Of__desc____obj__Java__lang__Object____obj__Java__lang__Object____obj__Java__lang__Object____obj__Java__lang__Object____obj__Java__lang__Object____obj__Java__lang__Object____obj__Java__lang__Object____obj__Java__lang__Object____obj__Java__lang__Object____obj__Java__lang__Object____obj__Java__lang__Object____obj__Java__lang__Object____obj__Java__lang__Object____obj__Java__lang__Object____obj__Java__lang__Object____obj__Java__lang__Object__ret____obj__Java__util__Map(var0 Java__lang__Object__Instance, var1 Java__lang__Object__Instance, var2 Java__lang__Object__Instance, var3 Java__lang__Object__Instance, var4 Java__lang__Object__Instance, var5 Java__lang__Object__Instance, var6 Java__lang__Object__Instance, var7 Java__lang__Object__Instance, var8 Java__lang__Object__Instance, var9 Java__lang__Object__Instance, var10 Java__lang__Object__Instance, var11 Java__lang__Object__Instance, var12 Java__lang__Object__Instance, var13 Java__lang__Object__Instance, var14 Java__lang__Object__Instance, var15 Java__lang__Object__Instance) Java__util__Map__Instance {
	panic("Method not implemented - java/util/Map.of(Ljava/lang/Object;Ljava/lang/Object;Ljava/lang/Object;Ljava/lang/Object;Ljava/lang/Object;Ljava/lang/Object;Ljava/lang/Object;Ljava/lang/Object;Ljava/lang/Object;Ljava/lang/Object;Ljava/lang/Object;Ljava/lang/Object;Ljava/lang/Object;Ljava/lang/Object;Ljava/lang/Object;Ljava/lang/Object;)Ljava/util/Map;")
}

func (this *Java__util__Map__Static) Impl__Of__desc____obj__Java__lang__Object____obj__Java__lang__Object____obj__Java__lang__Object____obj__Java__lang__Object____obj__Java__lang__Object____obj__Java__lang__Object____obj__Java__lang__Object____obj__Java__lang__Object____obj__Java__lang__Object____obj__Java__lang__Object____obj__Java__lang__Object____obj__Java__lang__Object____obj__Java__lang__Object____obj__Java__lang__Object____obj__Java__lang__Object____obj__Java__lang__Object____obj__Java__lang__Object____obj__Java__lang__Object__ret____obj__Java__util__Map(var0 Java__lang__Object__Instance, var1 Java__lang__Object__Instance, var2 Java__lang__Object__Instance, var3 Java__lang__Object__Instance, var4 Java__lang__Object__Instance, var5 Java__lang__Object__Instance, var6 Java__lang__Object__Instance, var7 Java__lang__Object__Instance, var8 Java__lang__Object__Instance, var9 Java__lang__Object__Instance, var10 Java__lang__Object__Instance, var11 Java__lang__Object__Instance, var12 Java__lang__Object__Instance, var13 Java__lang__Object__Instance, var14 Java__lang__Object__Instance, var15 Java__lang__Object__Instance, var16 Java__lang__Object__Instance, var17 Java__lang__Object__Instance) Java__util__Map__Instance {
	panic("Method not implemented - java/util/Map.of(Ljava/lang/Object;Ljava/lang/Object;Ljava/lang/Object;Ljava/lang/Object;Ljava/lang/Object;Ljava/lang/Object;Ljava/lang/Object;Ljava/lang/Object;Ljava/lang/Object;Ljava/lang/Object;Ljava/lang/Object;Ljava/lang/Object;Ljava/lang/Object;Ljava/lang/Object;Ljava/lang/Object;Ljava/lang/Object;Ljava/lang/Object;Ljava/lang/Object;)Ljava/util/Map;")
}

func (this *Java__util__Map__Static) Impl__Of__desc____obj__Java__lang__Object____obj__Java__lang__Object____obj__Java__lang__Object____obj__Java__lang__Object____obj__Java__lang__Object____obj__Java__lang__Object____obj__Java__lang__Object____obj__Java__lang__Object____obj__Java__lang__Object____obj__Java__lang__Object____obj__Java__lang__Object____obj__Java__lang__Object____obj__Java__lang__Object____obj__Java__lang__Object____obj__Java__lang__Object____obj__Java__lang__Object____obj__Java__lang__Object____obj__Java__lang__Object____obj__Java__lang__Object____obj__Java__lang__Object__ret____obj__Java__util__Map(var0 Java__lang__Object__Instance, var1 Java__lang__Object__Instance, var2 Java__lang__Object__Instance, var3 Java__lang__Object__Instance, var4 Java__lang__Object__Instance, var5 Java__lang__Object__Instance, var6 Java__lang__Object__Instance, var7 Java__lang__Object__Instance, var8 Java__lang__Object__Instance, var9 Java__lang__Object__Instance, var10 Java__lang__Object__Instance, var11 Java__lang__Object__Instance, var12 Java__lang__Object__Instance, var13 Java__lang__Object__Instance, var14 Java__lang__Object__Instance, var15 Java__lang__Object__Instance, var16 Java__lang__Object__Instance, var17 Java__lang__Object__Instance, var18 Java__lang__Object__Instance, var19 Java__lang__Object__Instance) Java__util__Map__Instance {
	panic("Method not implemented - java/util/Map.of(Ljava/lang/Object;Ljava/lang/Object;Ljava/lang/Object;Ljava/lang/Object;Ljava/lang/Object;Ljava/lang/Object;Ljava/lang/Object;Ljava/lang/Object;Ljava/lang/Object;Ljava/lang/Object;Ljava/lang/Object;Ljava/lang/Object;Ljava/lang/Object;Ljava/lang/Object;Ljava/lang/Object;Ljava/lang/Object;Ljava/lang/Object;Ljava/lang/Object;Ljava/lang/Object;Ljava/lang/Object;)Ljava/util/Map;")
}

func (this *Java__util__Map__Static) Impl__OfEntries__desc____arr____obj__Java__util__Map__innerclass__Entry__ret____obj__Java__util__Map(var0 ObjectArray__Instance) Java__util__Map__Instance {
	panic("Method not implemented - java/util/Map.ofEntries([Ljava/util/Map$Entry;)Ljava/util/Map;")
}

type Java__util__Map__Instance interface {
	PutAll__desc____obj__Java__util__Map__ret__V(Java__util__Map__Instance)
	PutIfAbsent__desc____obj__Java__lang__Object____obj__Java__lang__Object__ret____obj__Java__lang__Object(Java__lang__Object__Instance, Java__lang__Object__Instance) Java__lang__Object__Instance
	GetClass__desc____ret____obj__Java__lang__Class() Java__lang__Class__Instance
	Get__desc____obj__Java__lang__Object__ret____obj__Java__lang__Object(Java__lang__Object__Instance) Java__lang__Object__Instance
	Compute__desc____obj__Java__lang__Object____obj__Java__util__function__BiFunction__ret____obj__Java__lang__Object(Java__lang__Object__Instance, Java__util__function__BiFunction__Instance) Java__lang__Object__Instance
	ComputeIfAbsent__desc____obj__Java__lang__Object____obj__Java__util__function__Function__ret____obj__Java__lang__Object(Java__lang__Object__Instance, Java__util__function__Function__Instance) Java__lang__Object__Instance
	Finalize__desc____ret__V()
	ContainsValue__desc____obj__Java__lang__Object__ret__Z(Java__lang__Object__Instance) bool
	NotifyAll__desc____ret__V()
	Wait__desc____ret__V()
	GetOrDefault__desc____obj__Java__lang__Object____obj__Java__lang__Object__ret____obj__Java__lang__Object(Java__lang__Object__Instance, Java__lang__Object__Instance) Java__lang__Object__Instance
	HashCode__desc____ret__I() int
	Clear__desc____ret__V()
	ReplaceAll__desc____obj__Java__util__function__BiFunction__ret__V(Java__util__function__BiFunction__Instance)
	Merge__desc____obj__Java__lang__Object____obj__Java__lang__Object____obj__Java__util__function__BiFunction__ret____obj__Java__lang__Object(Java__lang__Object__Instance, Java__lang__Object__Instance, Java__util__function__BiFunction__Instance) Java__lang__Object__Instance
	Remove__desc____obj__Java__lang__Object____obj__Java__lang__Object__ret__Z(Java__lang__Object__Instance, Java__lang__Object__Instance) bool
	ForEach__desc____obj__Java__util__function__BiConsumer__ret__V(Java__util__function__BiConsumer__Instance)
	ContainsKey__desc____obj__Java__lang__Object__ret__Z(Java__lang__Object__Instance) bool
	IsEmpty__desc____ret__Z() bool
	Put__desc____obj__Java__lang__Object____obj__Java__lang__Object__ret____obj__Java__lang__Object(Java__lang__Object__Instance, Java__lang__Object__Instance) Java__lang__Object__Instance
	Remove__desc____obj__Java__lang__Object__ret____obj__Java__lang__Object(Java__lang__Object__Instance) Java__lang__Object__Instance
	Wait__desc__J__I__ret__V(int64, int)
	Size__desc____ret__I() int
	Clone__desc____ret____obj__Java__lang__Object() Java__lang__Object__Instance
	Wait__desc__J__ret__V(int64)
	ComputeIfPresent__desc____obj__Java__lang__Object____obj__Java__util__function__BiFunction__ret____obj__Java__lang__Object(Java__lang__Object__Instance, Java__util__function__BiFunction__Instance) Java__lang__Object__Instance
	Equals__desc____obj__Java__lang__Object__ret__Z(Java__lang__Object__Instance) bool
	Replace__desc____obj__Java__lang__Object____obj__Java__lang__Object__ret____obj__Java__lang__Object(Java__lang__Object__Instance, Java__lang__Object__Instance) Java__lang__Object__Instance
	Notify__desc____ret__V()
	Replace__desc____obj__Java__lang__Object____obj__Java__lang__Object____obj__Java__lang__Object__ret__Z(Java__lang__Object__Instance, Java__lang__Object__Instance, Java__lang__Object__Instance) bool
	ToString__desc____ret____obj__Java__lang__String() Java__lang__String__Instance
	RawPtr__Java__lang__Object() *Java__lang__Object__Impl
}

func Java__util__Map__defaultmethod__Compute__desc____obj__Java__lang__Object____obj__Java__util__function__BiFunction__ret____obj__Java__lang__Object(this Java__util__Map__Instance, var0 Java__lang__Object__Instance, var1 Java__util__function__BiFunction__Instance) Java__lang__Object__Instance {
	panic("Method not implemented - java/util/Map.compute(Ljava/lang/Object;Ljava/util/function/BiFunction;)Ljava/lang/Object;")
}

func Java__util__Map__defaultmethod__ComputeIfAbsent__desc____obj__Java__lang__Object____obj__Java__util__function__Function__ret____obj__Java__lang__Object(this Java__util__Map__Instance, var0 Java__lang__Object__Instance, var1 Java__util__function__Function__Instance) Java__lang__Object__Instance {
	panic("Method not implemented - java/util/Map.computeIfAbsent(Ljava/lang/Object;Ljava/util/function/Function;)Ljava/lang/Object;")
}

func Java__util__Map__defaultmethod__ComputeIfPresent__desc____obj__Java__lang__Object____obj__Java__util__function__BiFunction__ret____obj__Java__lang__Object(this Java__util__Map__Instance, var0 Java__lang__Object__Instance, var1 Java__util__function__BiFunction__Instance) Java__lang__Object__Instance {
	panic("Method not implemented - java/util/Map.computeIfPresent(Ljava/lang/Object;Ljava/util/function/BiFunction;)Ljava/lang/Object;")
}

func Java__util__Map__defaultmethod__ForEach__desc____obj__Java__util__function__BiConsumer__ret__V(this Java__util__Map__Instance, var0 Java__util__function__BiConsumer__Instance) {
	panic("Method not implemented - java/util/Map.forEach(Ljava/util/function/BiConsumer;)V")
}

func Java__util__Map__defaultmethod__GetOrDefault__desc____obj__Java__lang__Object____obj__Java__lang__Object__ret____obj__Java__lang__Object(this Java__util__Map__Instance, var0 Java__lang__Object__Instance, var1 Java__lang__Object__Instance) Java__lang__Object__Instance {
	panic("Method not implemented - java/util/Map.getOrDefault(Ljava/lang/Object;Ljava/lang/Object;)Ljava/lang/Object;")
}

func Java__util__Map__defaultmethod__Merge__desc____obj__Java__lang__Object____obj__Java__lang__Object____obj__Java__util__function__BiFunction__ret____obj__Java__lang__Object(this Java__util__Map__Instance, var0 Java__lang__Object__Instance, var1 Java__lang__Object__Instance, var2 Java__util__function__BiFunction__Instance) Java__lang__Object__Instance {
	panic("Method not implemented - java/util/Map.merge(Ljava/lang/Object;Ljava/lang/Object;Ljava/util/function/BiFunction;)Ljava/lang/Object;")
}

func Java__util__Map__defaultmethod__PutIfAbsent__desc____obj__Java__lang__Object____obj__Java__lang__Object__ret____obj__Java__lang__Object(this Java__util__Map__Instance, var0 Java__lang__Object__Instance, var1 Java__lang__Object__Instance) Java__lang__Object__Instance {
	panic("Method not implemented - java/util/Map.putIfAbsent(Ljava/lang/Object;Ljava/lang/Object;)Ljava/lang/Object;")
}

func Java__util__Map__defaultmethod__Remove__desc____obj__Java__lang__Object____obj__Java__lang__Object__ret__Z(this Java__util__Map__Instance, var0 Java__lang__Object__Instance, var1 Java__lang__Object__Instance) bool {
	panic("Method not implemented - java/util/Map.remove(Ljava/lang/Object;Ljava/lang/Object;)Z")
}

func Java__util__Map__defaultmethod__Replace__desc____obj__Java__lang__Object____obj__Java__lang__Object__ret____obj__Java__lang__Object(this Java__util__Map__Instance, var0 Java__lang__Object__Instance, var1 Java__lang__Object__Instance) Java__lang__Object__Instance {
	panic("Method not implemented - java/util/Map.replace(Ljava/lang/Object;Ljava/lang/Object;)Ljava/lang/Object;")
}

func Java__util__Map__defaultmethod__Replace__desc____obj__Java__lang__Object____obj__Java__lang__Object____obj__Java__lang__Object__ret__Z(this Java__util__Map__Instance, var0 Java__lang__Object__Instance, var1 Java__lang__Object__Instance, var2 Java__lang__Object__Instance) bool {
	panic("Method not implemented - java/util/Map.replace(Ljava/lang/Object;Ljava/lang/Object;Ljava/lang/Object;)Z")
}

func Java__util__Map__defaultmethod__ReplaceAll__desc____obj__Java__util__function__BiFunction__ret__V(this Java__util__Map__Instance, var0 Java__util__function__BiFunction__Instance) {
	panic("Method not implemented - java/util/Map.replaceAll(Ljava/util/function/BiFunction;)V")
}

type Java__util__Map__innerclass__Entry__Static struct{}

var Java__util__Map__innerclass__Entry__Var Java__util__Map__innerclass__Entry__Static

func Java__util__Map__innerclass__Entry() *Java__util__Map__innerclass__Entry__Static {
	return &Java__util__Map__innerclass__Entry__Var
}

func (this *Java__util__Map__innerclass__Entry__Static) Impl__ComparingByKey__desc____ret____obj__Java__util__Comparator() Java__util__Comparator__Instance {
	panic("Method not implemented - java/util/Map$Entry.comparingByKey()Ljava/util/Comparator;")
}

func (this *Java__util__Map__innerclass__Entry__Static) Impl__ComparingByKey__desc____obj__Java__util__Comparator__ret____obj__Java__util__Comparator(var0 Java__util__Comparator__Instance) Java__util__Comparator__Instance {
	panic("Method not implemented - java/util/Map$Entry.comparingByKey(Ljava/util/Comparator;)Ljava/util/Comparator;")
}

func (this *Java__util__Map__innerclass__Entry__Static) Impl__ComparingByValue__desc____ret____obj__Java__util__Comparator() Java__util__Comparator__Instance {
	panic("Method not implemented - java/util/Map$Entry.comparingByValue()Ljava/util/Comparator;")
}

func (this *Java__util__Map__innerclass__Entry__Static) Impl__ComparingByValue__desc____obj__Java__util__Comparator__ret____obj__Java__util__Comparator(var0 Java__util__Comparator__Instance) Java__util__Comparator__Instance {
	panic("Method not implemented - java/util/Map$Entry.comparingByValue(Ljava/util/Comparator;)Ljava/util/Comparator;")
}

type Java__util__Map__innerclass__Entry__Instance interface {
	GetClass__desc____ret____obj__Java__lang__Class() Java__lang__Class__Instance
	Finalize__desc____ret__V()
	NotifyAll__desc____ret__V()
	Wait__desc____ret__V()
	HashCode__desc____ret__I() int
	SetValue__desc____obj__Java__lang__Object__ret____obj__Java__lang__Object(Java__lang__Object__Instance) Java__lang__Object__Instance
	Wait__desc__J__I__ret__V(int64, int)
	Clone__desc____ret____obj__Java__lang__Object() Java__lang__Object__Instance
	Wait__desc__J__ret__V(int64)
	Equals__desc____obj__Java__lang__Object__ret__Z(Java__lang__Object__Instance) bool
	Notify__desc____ret__V()
	GetValue__desc____ret____obj__Java__lang__Object() Java__lang__Object__Instance
	ToString__desc____ret____obj__Java__lang__String() Java__lang__String__Instance
	GetKey__desc____ret____obj__Java__lang__Object() Java__lang__Object__Instance
	RawPtr__Java__lang__Object() *Java__lang__Object__Impl
}

type Java__util__Spliterator__Static struct {
	CONCURRENT int
	DISTINCT   int
	IMMUTABLE  int
	NONNULL    int
	ORDERED    int
	SIZED      int
	SORTED     int
	SUBSIZED   int
}

var Java__util__Spliterator__Var Java__util__Spliterator__Static

func Java__util__Spliterator() *Java__util__Spliterator__Static {
	return &Java__util__Spliterator__Var
}

type Java__util__Spliterator__Instance interface {
	GetClass__desc____ret____obj__Java__lang__Class() Java__lang__Class__Instance
	TrySplit__desc____ret____obj__Java__util__Spliterator() Java__util__Spliterator__Instance
	Finalize__desc____ret__V()
	HasCharacteristics__desc__I__ret__Z(int) bool
	Characteristics__desc____ret__I() int
	GetComparator__desc____ret____obj__Java__util__Comparator() Java__util__Comparator__Instance
	NotifyAll__desc____ret__V()
	Wait__desc____ret__V()
	HashCode__desc____ret__I() int
	TryAdvance__desc____obj__Java__util__function__Consumer__ret__Z(Java__util__function__Consumer__Instance) bool
	GetExactSizeIfKnown__desc____ret__J() int64
	Wait__desc__J__I__ret__V(int64, int)
	Clone__desc____ret____obj__Java__lang__Object() Java__lang__Object__Instance
	Wait__desc__J__ret__V(int64)
	Equals__desc____obj__Java__lang__Object__ret__Z(Java__lang__Object__Instance) bool
	Notify__desc____ret__V()
	ForEachRemaining__desc____obj__Java__util__function__Consumer__ret__V(Java__util__function__Consumer__Instance)
	EstimateSize__desc____ret__J() int64
	ToString__desc____ret____obj__Java__lang__String() Java__lang__String__Instance
	RawPtr__Java__lang__Object() *Java__lang__Object__Impl
}

func Java__util__Spliterator__defaultmethod__ForEachRemaining__desc____obj__Java__util__function__Consumer__ret__V(this Java__util__Spliterator__Instance, var0 Java__util__function__Consumer__Instance) {
	panic("Method not implemented - java/util/Spliterator.forEachRemaining(Ljava/util/function/Consumer;)V")
}

func Java__util__Spliterator__defaultmethod__GetComparator__desc____ret____obj__Java__util__Comparator(this Java__util__Spliterator__Instance) Java__util__Comparator__Instance {
	panic("Method not implemented - java/util/Spliterator.getComparator()Ljava/util/Comparator;")
}

func Java__util__Spliterator__defaultmethod__GetExactSizeIfKnown__desc____ret__J(this Java__util__Spliterator__Instance) int64 {
	panic("Method not implemented - java/util/Spliterator.getExactSizeIfKnown()J")
}

func Java__util__Spliterator__defaultmethod__HasCharacteristics__desc__I__ret__Z(this Java__util__Spliterator__Instance, var0 int) bool {
	panic("Method not implemented - java/util/Spliterator.hasCharacteristics(I)Z")
}

type Java__util__Spliterator__innerclass__OfInt__Static struct{}

var Java__util__Spliterator__innerclass__OfInt__Var Java__util__Spliterator__innerclass__OfInt__Static

func Java__util__Spliterator__innerclass__OfInt() *Java__util__Spliterator__innerclass__OfInt__Static {
	return &Java__util__Spliterator__innerclass__OfInt__Var
}

type Java__util__Spliterator__innerclass__OfInt__Instance interface {
	GetClass__desc____ret____obj__Java__lang__Class() Java__lang__Class__Instance
	TrySplit__desc____ret____obj__Java__util__Spliterator() Java__util__Spliterator__Instance
	Finalize__desc____ret__V()
	HasCharacteristics__desc__I__ret__Z(int) bool
	TryAdvance__desc____obj__Java__lang__Object__ret__Z(Java__lang__Object__Instance) bool
	Characteristics__desc____ret__I() int
	GetComparator__desc____ret____obj__Java__util__Comparator() Java__util__Comparator__Instance
	NotifyAll__desc____ret__V()
	Wait__desc____ret__V()
	HashCode__desc____ret__I() int
	TrySplit__desc____ret____obj__Java__util__Spliterator__innerclass__OfInt() Java__util__Spliterator__innerclass__OfInt__Instance
	TryAdvance__desc____obj__Java__util__function__Consumer__ret__Z(Java__util__function__Consumer__Instance) bool
	GetExactSizeIfKnown__desc____ret__J() int64
	Wait__desc__J__I__ret__V(int64, int)
	Clone__desc____ret____obj__Java__lang__Object() Java__lang__Object__Instance
	ForEachRemaining__desc____obj__Java__lang__Object__ret__V(Java__lang__Object__Instance)
	Wait__desc__J__ret__V(int64)
	Equals__desc____obj__Java__lang__Object__ret__Z(Java__lang__Object__Instance) bool
	Notify__desc____ret__V()
	ForEachRemaining__desc____obj__Java__util__function__Consumer__ret__V(Java__util__function__Consumer__Instance)
	TrySplit__desc____ret____obj__Java__util__Spliterator__innerclass__OfPrimitive() Java__util__Spliterator__innerclass__OfPrimitive__Instance
	EstimateSize__desc____ret__J() int64
	ToString__desc____ret____obj__Java__lang__String() Java__lang__String__Instance
	RawPtr__Java__lang__Object() *Java__lang__Object__Impl
}

func Java__util__Spliterator__innerclass__OfInt__defaultmethod__ForEachRemaining__desc____obj__Java__lang__Object__ret__V(this Java__util__Spliterator__innerclass__OfInt__Instance, var0 Java__lang__Object__Instance) {
	panic("Method not implemented - java/util/Spliterator$OfInt.forEachRemaining(Ljava/lang/Object;)V")
}

func Java__util__Spliterator__innerclass__OfInt__defaultmethod__ForEachRemaining__desc____obj__Java__util__function__Consumer__ret__V(this Java__util__Spliterator__innerclass__OfInt__Instance, var0 Java__util__function__Consumer__Instance) {
	panic("Method not implemented - java/util/Spliterator$OfInt.forEachRemaining(Ljava/util/function/Consumer;)V")
}

func Java__util__Spliterator__innerclass__OfInt__defaultmethod__TryAdvance__desc____obj__Java__lang__Object__ret__Z(this Java__util__Spliterator__innerclass__OfInt__Instance, var0 Java__lang__Object__Instance) bool {
	panic("Method not implemented - java/util/Spliterator$OfInt.tryAdvance(Ljava/lang/Object;)Z")
}

func Java__util__Spliterator__innerclass__OfInt__defaultmethod__TryAdvance__desc____obj__Java__util__function__Consumer__ret__Z(this Java__util__Spliterator__innerclass__OfInt__Instance, var0 Java__util__function__Consumer__Instance) bool {
	panic("Method not implemented - java/util/Spliterator$OfInt.tryAdvance(Ljava/util/function/Consumer;)Z")
}

func Java__util__Spliterator__innerclass__OfInt__defaultmethod__TrySplit__desc____ret____obj__Java__util__Spliterator__innerclass__OfPrimitive(this Java__util__Spliterator__innerclass__OfInt__Instance) Java__util__Spliterator__innerclass__OfPrimitive__Instance {
	panic("Method not implemented - java/util/Spliterator$OfInt.trySplit()Ljava/util/Spliterator$OfPrimitive;")
}

type Java__util__Spliterator__innerclass__OfPrimitive__Static struct{}

var Java__util__Spliterator__innerclass__OfPrimitive__Var Java__util__Spliterator__innerclass__OfPrimitive__Static

func Java__util__Spliterator__innerclass__OfPrimitive() *Java__util__Spliterator__innerclass__OfPrimitive__Static {
	return &Java__util__Spliterator__innerclass__OfPrimitive__Var
}

type Java__util__Spliterator__innerclass__OfPrimitive__Instance interface {
	GetClass__desc____ret____obj__Java__lang__Class() Java__lang__Class__Instance
	TrySplit__desc____ret____obj__Java__util__Spliterator() Java__util__Spliterator__Instance
	Finalize__desc____ret__V()
	HasCharacteristics__desc__I__ret__Z(int) bool
	TryAdvance__desc____obj__Java__lang__Object__ret__Z(Java__lang__Object__Instance) bool
	Characteristics__desc____ret__I() int
	GetComparator__desc____ret____obj__Java__util__Comparator() Java__util__Comparator__Instance
	NotifyAll__desc____ret__V()
	Wait__desc____ret__V()
	HashCode__desc____ret__I() int
	TryAdvance__desc____obj__Java__util__function__Consumer__ret__Z(Java__util__function__Consumer__Instance) bool
	GetExactSizeIfKnown__desc____ret__J() int64
	Wait__desc__J__I__ret__V(int64, int)
	Clone__desc____ret____obj__Java__lang__Object() Java__lang__Object__Instance
	ForEachRemaining__desc____obj__Java__lang__Object__ret__V(Java__lang__Object__Instance)
	Wait__desc__J__ret__V(int64)
	Equals__desc____obj__Java__lang__Object__ret__Z(Java__lang__Object__Instance) bool
	Notify__desc____ret__V()
	ForEachRemaining__desc____obj__Java__util__function__Consumer__ret__V(Java__util__function__Consumer__Instance)
	TrySplit__desc____ret____obj__Java__util__Spliterator__innerclass__OfPrimitive() Java__util__Spliterator__innerclass__OfPrimitive__Instance
	EstimateSize__desc____ret__J() int64
	ToString__desc____ret____obj__Java__lang__String() Java__lang__String__Instance
	RawPtr__Java__lang__Object() *Java__lang__Object__Impl
}

func Java__util__Spliterator__innerclass__OfPrimitive__defaultmethod__ForEachRemaining__desc____obj__Java__lang__Object__ret__V(this Java__util__Spliterator__innerclass__OfPrimitive__Instance, var0 Java__lang__Object__Instance) {
	panic("Method not implemented - java/util/Spliterator$OfPrimitive.forEachRemaining(Ljava/lang/Object;)V")
}

func Java__util__Spliterator__innerclass__OfPrimitive__defaultmethod__TrySplit__desc____ret____obj__Java__util__Spliterator(this Java__util__Spliterator__innerclass__OfPrimitive__Instance) Java__util__Spliterator__Instance {
	panic("Method not implemented - java/util/Spliterator$OfPrimitive.trySplit()Ljava/util/Spliterator;")
}

type Java__util__Spliterators__innerclass__AbstractSpliterator__Static struct {
	BATCH_UNIT int
	MAX_BATCH  int
}

var Java__util__Spliterators__innerclass__AbstractSpliterator__Var Java__util__Spliterators__innerclass__AbstractSpliterator__Static

func Java__util__Spliterators__innerclass__AbstractSpliterator() *Java__util__Spliterators__innerclass__AbstractSpliterator__Static {
	return &Java__util__Spliterators__innerclass__AbstractSpliterator__Var
}

func (this *Java__util__Spliterators__innerclass__AbstractSpliterator__Static) New() *Java__util__Spliterators__innerclass__AbstractSpliterator__Impl {
	v := &Java__util__Spliterators__innerclass__AbstractSpliterator__Impl{
		Java__lang__Object__Impl: Java__lang__Object().New(),
	}
	v.Java__util__Spliterators__innerclass__AbstractSpliterator__InitDispatch(v)
	return v
}

type Java__util__Spliterators__innerclass__AbstractSpliterator__Dispatch interface {
	Java__lang__Object__Dispatch
	Impl__Instance_Init__desc__J__I__ret__V(int64, int)
	Impl__Characteristics__desc____ret__I() int
	Impl__EstimateSize__desc____ret__J() int64
	Impl__ForEachRemaining__desc____obj__Java__util__function__Consumer__ret__V(Java__util__function__Consumer__Instance)
	Impl__GetComparator__desc____ret____obj__Java__util__Comparator() Java__util__Comparator__Instance
	Impl__GetExactSizeIfKnown__desc____ret__J() int64
	Impl__HasCharacteristics__desc__I__ret__Z(int) bool
	Impl__TryAdvance__desc____obj__Java__util__function__Consumer__ret__Z(Java__util__function__Consumer__Instance) bool
	Impl__TrySplit__desc____ret____obj__Java__util__Spliterator() Java__util__Spliterator__Instance
}

func (this *Java__util__Spliterators__innerclass__AbstractSpliterator__Impl) Java__util__Spliterators__innerclass__AbstractSpliterator__InitDispatch(v Java__util__Spliterators__innerclass__AbstractSpliterator__Dispatch) {
	this.Java__lang__Object__Impl.Java__lang__Object__InitDispatch(v)
	this._dispatch = v
}

func (this *Java__util__Spliterators__innerclass__AbstractSpliterator__Impl) Instance_Init__desc__J__I__ret__V(var0 int64, var1 int) {
	this._dispatch.Impl__Instance_Init__desc__J__I__ret__V(var0, var1)
}

func (this *Java__util__Spliterators__innerclass__AbstractSpliterator__Impl) Characteristics__desc____ret__I() int {
	return this._dispatch.Impl__Characteristics__desc____ret__I()
}

func (this *Java__util__Spliterators__innerclass__AbstractSpliterator__Impl) EstimateSize__desc____ret__J() int64 {
	return this._dispatch.Impl__EstimateSize__desc____ret__J()
}

func (this *Java__util__Spliterators__innerclass__AbstractSpliterator__Impl) ForEachRemaining__desc____obj__Java__util__function__Consumer__ret__V(var0 Java__util__function__Consumer__Instance) {
	this._dispatch.Impl__ForEachRemaining__desc____obj__Java__util__function__Consumer__ret__V(var0)
}

func (this *Java__util__Spliterators__innerclass__AbstractSpliterator__Impl) GetComparator__desc____ret____obj__Java__util__Comparator() Java__util__Comparator__Instance {
	return this._dispatch.Impl__GetComparator__desc____ret____obj__Java__util__Comparator()
}

func (this *Java__util__Spliterators__innerclass__AbstractSpliterator__Impl) GetExactSizeIfKnown__desc____ret__J() int64 {
	return this._dispatch.Impl__GetExactSizeIfKnown__desc____ret__J()
}

func (this *Java__util__Spliterators__innerclass__AbstractSpliterator__Impl) HasCharacteristics__desc__I__ret__Z(var0 int) bool {
	return this._dispatch.Impl__HasCharacteristics__desc__I__ret__Z(var0)
}

func (this *Java__util__Spliterators__innerclass__AbstractSpliterator__Impl) TryAdvance__desc____obj__Java__util__function__Consumer__ret__Z(var0 Java__util__function__Consumer__Instance) bool {
	return this._dispatch.Impl__TryAdvance__desc____obj__Java__util__function__Consumer__ret__Z(var0)
}

func (this *Java__util__Spliterators__innerclass__AbstractSpliterator__Impl) TrySplit__desc____ret____obj__Java__util__Spliterator() Java__util__Spliterator__Instance {
	return this._dispatch.Impl__TrySplit__desc____ret____obj__Java__util__Spliterator()
}

type Java__util__Spliterators__innerclass__AbstractSpliterator__Instance interface {
	GetClass__desc____ret____obj__Java__lang__Class() Java__lang__Class__Instance
	TrySplit__desc____ret____obj__Java__util__Spliterator() Java__util__Spliterator__Instance
	Finalize__desc____ret__V()
	HasCharacteristics__desc__I__ret__Z(int) bool
	Characteristics__desc____ret__I() int
	GetComparator__desc____ret____obj__Java__util__Comparator() Java__util__Comparator__Instance
	NotifyAll__desc____ret__V()
	Wait__desc____ret__V()
	HashCode__desc____ret__I() int
	TryAdvance__desc____obj__Java__util__function__Consumer__ret__Z(Java__util__function__Consumer__Instance) bool
	GetExactSizeIfKnown__desc____ret__J() int64
	Wait__desc__J__I__ret__V(int64, int)
	Clone__desc____ret____obj__Java__lang__Object() Java__lang__Object__Instance
	Wait__desc__J__ret__V(int64)
	Equals__desc____obj__Java__lang__Object__ret__Z(Java__lang__Object__Instance) bool
	Notify__desc____ret__V()
	ForEachRemaining__desc____obj__Java__util__function__Consumer__ret__V(Java__util__function__Consumer__Instance)
	EstimateSize__desc____ret__J() int64
	ToString__desc____ret____obj__Java__lang__String() Java__lang__String__Instance
	RawPtr__Java__util__Spliterators__innerclass__AbstractSpliterator() *Java__util__Spliterators__innerclass__AbstractSpliterator__Impl
	RawPtr__Java__lang__Object() *Java__lang__Object__Impl
}

type Java__util__Spliterators__innerclass__AbstractSpliterator__Impl struct {
	*Java__lang__Object__Impl
	_dispatch Java__util__Spliterators__innerclass__AbstractSpliterator__Dispatch
}

func (this *Java__util__Spliterators__innerclass__AbstractSpliterator__Impl) Impl__Instance_Init__desc__J__I__ret__V(var0 int64, var1 int) {
	panic("Method not implemented - java/util/Spliterators$AbstractSpliterator.<init>(JI)V")
}

func (this *Java__util__Spliterators__innerclass__AbstractSpliterator__Impl) Impl__Characteristics__desc____ret__I() int {
	panic("Method not implemented - java/util/Spliterators$AbstractSpliterator.characteristics()I")
}

func (this *Java__util__Spliterators__innerclass__AbstractSpliterator__Impl) Impl__EstimateSize__desc____ret__J() int64 {
	panic("Method not implemented - java/util/Spliterators$AbstractSpliterator.estimateSize()J")
}

func (this *Java__util__Spliterators__innerclass__AbstractSpliterator__Impl) Impl__TryAdvance__desc____obj__Java__util__function__Consumer__ret__Z(var0 Java__util__function__Consumer__Instance) bool {
	panic("Method not implemented - java/util/Spliterator.tryAdvance(Ljava/util/function/Consumer;)Z")
}

func (this *Java__util__Spliterators__innerclass__AbstractSpliterator__Impl) Impl__TrySplit__desc____ret____obj__Java__util__Spliterator() Java__util__Spliterator__Instance {
	panic("Method not implemented - java/util/Spliterators$AbstractSpliterator.trySplit()Ljava/util/Spliterator;")
}

func (this *Java__util__Spliterators__innerclass__AbstractSpliterator__Impl) RawPtr__Java__util__Spliterators__innerclass__AbstractSpliterator() *Java__util__Spliterators__innerclass__AbstractSpliterator__Impl {
	return this
}

func (this *Java__util__Spliterators__innerclass__AbstractSpliterator__Impl) Impl_Self() Java__lang__Object__Instance {
	return this
}

func (this *Java__util__Spliterators__innerclass__AbstractSpliterator__Impl) Impl__ForEachRemaining__desc____obj__Java__util__function__Consumer__ret__V(var0 Java__util__function__Consumer__Instance) {
	Java__util__Spliterator__defaultmethod__ForEachRemaining__desc____obj__Java__util__function__Consumer__ret__V(this, var0)
}

func (this *Java__util__Spliterators__innerclass__AbstractSpliterator__Impl) Impl__GetComparator__desc____ret____obj__Java__util__Comparator() Java__util__Comparator__Instance {
	return Java__util__Spliterator__defaultmethod__GetComparator__desc____ret____obj__Java__util__Comparator(this)
}

func (this *Java__util__Spliterators__innerclass__AbstractSpliterator__Impl) Impl__GetExactSizeIfKnown__desc____ret__J() int64 {
	return Java__util__Spliterator__defaultmethod__GetExactSizeIfKnown__desc____ret__J(this)
}

func (this *Java__util__Spliterators__innerclass__AbstractSpliterator__Impl) Impl__HasCharacteristics__desc__I__ret__Z(var0 int) bool {
	return Java__util__Spliterator__defaultmethod__HasCharacteristics__desc__I__ret__Z(this, var0)
}

type Java__util__WeakHashMap__Static struct {
	init sync.Once
}

var Java__util__WeakHashMap__Var Java__util__WeakHashMap__Static

func Java__util__WeakHashMap() *Java__util__WeakHashMap__Static {
	Java__util__WeakHashMap__Var.init.Do(Java__util__WeakHashMap__Var.Impl__Static_Init__desc____ret__V)
	return &Java__util__WeakHashMap__Var
}

func (this *Java__util__WeakHashMap__Static) New() *Java__util__WeakHashMap__Impl {
	v := &Java__util__WeakHashMap__Impl{
		Java__util__AbstractMap__Impl: Java__util__AbstractMap().New(),
	}
	v.Java__util__WeakHashMap__InitDispatch(v)
	return v
}

func (this *Java__util__WeakHashMap__Static) Impl__Static_Init__desc____ret__V() { }

func (this *Java__util__WeakHashMap__Static) Impl__PrivTo__Java__util__UnmaskNull__desc____obj__Java__lang__Object__ret____obj__Java__lang__Object(var0 Java__lang__Object__Instance) Java__lang__Object__Instance {
	panic("Method not implemented - java/util/WeakHashMap.unmaskNull(Ljava/lang/Object;)Ljava/lang/Object;")
}

type Java__util__WeakHashMap__Dispatch interface {
	Java__util__AbstractMap__Dispatch
	Impl__Instance_Init__desc__I__ret__V(int)
	Impl__Instance_Init__desc__I__F__ret__V(int, float32)
	Impl__Instance_Init__desc____obj__Java__util__Map__ret__V(Java__util__Map__Instance)
	Impl__PrivTo__Java__util__Hash__desc____obj__Java__lang__Object__ret__I(Java__lang__Object__Instance) int
	Impl__PrivTo__Java__util__RemoveMapping__desc____obj__Java__lang__Object__ret__Z(Java__lang__Object__Instance) bool
	Impl__PrivTo__Java__util__Resize__desc__I__ret__V(int)
}

func (this *Java__util__WeakHashMap__Impl) Java__util__WeakHashMap__InitDispatch(v Java__util__WeakHashMap__Dispatch) {
	this.Java__util__AbstractMap__Impl.Java__util__AbstractMap__InitDispatch(v)
	this._dispatch = v
}

func (this *Java__util__WeakHashMap__Impl) Instance_Init__desc__I__ret__V(var0 int) {
	this._dispatch.Impl__Instance_Init__desc__I__ret__V(var0)
}

func (this *Java__util__WeakHashMap__Impl) Instance_Init__desc__I__F__ret__V(var0 int, var1 float32) {
	this._dispatch.Impl__Instance_Init__desc__I__F__ret__V(var0, var1)
}

func (this *Java__util__WeakHashMap__Impl) Instance_Init__desc____obj__Java__util__Map__ret__V(var0 Java__util__Map__Instance) {
	this._dispatch.Impl__Instance_Init__desc____obj__Java__util__Map__ret__V(var0)
}

func (this *Java__util__WeakHashMap__Impl) PrivTo__Java__util__Hash__desc____obj__Java__lang__Object__ret__I(var0 Java__lang__Object__Instance) int {
	return this._dispatch.Impl__PrivTo__Java__util__Hash__desc____obj__Java__lang__Object__ret__I(var0)
}

func (this *Java__util__WeakHashMap__Impl) PrivTo__Java__util__RemoveMapping__desc____obj__Java__lang__Object__ret__Z(var0 Java__lang__Object__Instance) bool {
	return this._dispatch.Impl__PrivTo__Java__util__RemoveMapping__desc____obj__Java__lang__Object__ret__Z(var0)
}

func (this *Java__util__WeakHashMap__Impl) PrivTo__Java__util__Resize__desc__I__ret__V(var0 int) {
	this._dispatch.Impl__PrivTo__Java__util__Resize__desc__I__ret__V(var0)
}

type Java__util__WeakHashMap__Instance interface {
	PutAll__desc____obj__Java__util__Map__ret__V(Java__util__Map__Instance)
	PutIfAbsent__desc____obj__Java__lang__Object____obj__Java__lang__Object__ret____obj__Java__lang__Object(Java__lang__Object__Instance, Java__lang__Object__Instance) Java__lang__Object__Instance
	GetClass__desc____ret____obj__Java__lang__Class() Java__lang__Class__Instance
	Get__desc____obj__Java__lang__Object__ret____obj__Java__lang__Object(Java__lang__Object__Instance) Java__lang__Object__Instance
	Compute__desc____obj__Java__lang__Object____obj__Java__util__function__BiFunction__ret____obj__Java__lang__Object(Java__lang__Object__Instance, Java__util__function__BiFunction__Instance) Java__lang__Object__Instance
	ComputeIfAbsent__desc____obj__Java__lang__Object____obj__Java__util__function__Function__ret____obj__Java__lang__Object(Java__lang__Object__Instance, Java__util__function__Function__Instance) Java__lang__Object__Instance
	Finalize__desc____ret__V()
	ContainsValue__desc____obj__Java__lang__Object__ret__Z(Java__lang__Object__Instance) bool
	NotifyAll__desc____ret__V()
	Wait__desc____ret__V()
	GetOrDefault__desc____obj__Java__lang__Object____obj__Java__lang__Object__ret____obj__Java__lang__Object(Java__lang__Object__Instance, Java__lang__Object__Instance) Java__lang__Object__Instance
	HashCode__desc____ret__I() int
	Clear__desc____ret__V()
	ReplaceAll__desc____obj__Java__util__function__BiFunction__ret__V(Java__util__function__BiFunction__Instance)
	Merge__desc____obj__Java__lang__Object____obj__Java__lang__Object____obj__Java__util__function__BiFunction__ret____obj__Java__lang__Object(Java__lang__Object__Instance, Java__lang__Object__Instance, Java__util__function__BiFunction__Instance) Java__lang__Object__Instance
	Remove__desc____obj__Java__lang__Object____obj__Java__lang__Object__ret__Z(Java__lang__Object__Instance, Java__lang__Object__Instance) bool
	ForEach__desc____obj__Java__util__function__BiConsumer__ret__V(Java__util__function__BiConsumer__Instance)
	ContainsKey__desc____obj__Java__lang__Object__ret__Z(Java__lang__Object__Instance) bool
	IsEmpty__desc____ret__Z() bool
	PrivTo__Java__util__RemoveMapping__desc____obj__Java__lang__Object__ret__Z(Java__lang__Object__Instance) bool
	Put__desc____obj__Java__lang__Object____obj__Java__lang__Object__ret____obj__Java__lang__Object(Java__lang__Object__Instance, Java__lang__Object__Instance) Java__lang__Object__Instance
	PrivTo__Java__util__Hash__desc____obj__Java__lang__Object__ret__I(Java__lang__Object__Instance) int
	Remove__desc____obj__Java__lang__Object__ret____obj__Java__lang__Object(Java__lang__Object__Instance) Java__lang__Object__Instance
	Wait__desc__J__I__ret__V(int64, int)
	PrivTo__Java__util__Resize__desc__I__ret__V(int)
	Size__desc____ret__I() int
	Clone__desc____ret____obj__Java__lang__Object() Java__lang__Object__Instance
	Wait__desc__J__ret__V(int64)
	ComputeIfPresent__desc____obj__Java__lang__Object____obj__Java__util__function__BiFunction__ret____obj__Java__lang__Object(Java__lang__Object__Instance, Java__util__function__BiFunction__Instance) Java__lang__Object__Instance
	Equals__desc____obj__Java__lang__Object__ret__Z(Java__lang__Object__Instance) bool
	Replace__desc____obj__Java__lang__Object____obj__Java__lang__Object__ret____obj__Java__lang__Object(Java__lang__Object__Instance, Java__lang__Object__Instance) Java__lang__Object__Instance
	Notify__desc____ret__V()
	Replace__desc____obj__Java__lang__Object____obj__Java__lang__Object____obj__Java__lang__Object__ret__Z(Java__lang__Object__Instance, Java__lang__Object__Instance, Java__lang__Object__Instance) bool
	ToString__desc____ret____obj__Java__lang__String() Java__lang__String__Instance
	FieldGet__Java__util__WeakHashMap__ModCount() int
	FieldSet__Java__util__WeakHashMap__ModCount(v int)
	RawPtr__Java__util__WeakHashMap() *Java__util__WeakHashMap__Impl
	RawPtr__Java__util__AbstractMap() *Java__util__AbstractMap__Impl
	RawPtr__Java__lang__Object() *Java__lang__Object__Impl
}

type Java__util__WeakHashMap__Impl struct {
	*Java__util__AbstractMap__Impl
	_dispatch Java__util__WeakHashMap__Dispatch
	ModCount  int
}

func (this *Java__util__WeakHashMap__Impl) FieldGet__Java__util__WeakHashMap__ModCount() int {
	return this.ModCount
}

func (this *Java__util__WeakHashMap__Impl) FieldSet__Java__util__WeakHashMap__ModCount(v int) {
	this.ModCount = v
}

func (this *Java__util__WeakHashMap__Impl) Impl__Instance_Init__desc____ret__V() {
	panic("Method not implemented - java/util/WeakHashMap.<init>()V")
}

func (this *Java__util__WeakHashMap__Impl) Impl__Instance_Init__desc__I__ret__V(var0 int) {
	panic("Method not implemented - java/util/WeakHashMap.<init>(I)V")
}

func (this *Java__util__WeakHashMap__Impl) Impl__Instance_Init__desc__I__F__ret__V(var0 int, var1 float32) {
	panic("Method not implemented - java/util/WeakHashMap.<init>(IF)V")
}

func (this *Java__util__WeakHashMap__Impl) Impl__Instance_Init__desc____obj__Java__util__Map__ret__V(var0 Java__util__Map__Instance) {
	panic("Method not implemented - java/util/WeakHashMap.<init>(Ljava/util/Map;)V")
}

func (this *Java__util__WeakHashMap__Impl) Impl__Clear__desc____ret__V() {
	panic("Method not implemented - java/util/WeakHashMap.clear()V")
}

func (this *Java__util__WeakHashMap__Impl) Impl__ContainsKey__desc____obj__Java__lang__Object__ret__Z(var0 Java__lang__Object__Instance) bool {
	panic("Method not implemented - java/util/WeakHashMap.containsKey(Ljava/lang/Object;)Z")
}

func (this *Java__util__WeakHashMap__Impl) Impl__ContainsValue__desc____obj__Java__lang__Object__ret__Z(var0 Java__lang__Object__Instance) bool {
	panic("Method not implemented - java/util/WeakHashMap.containsValue(Ljava/lang/Object;)Z")
}

func (this *Java__util__WeakHashMap__Impl) Impl__ForEach__desc____obj__Java__util__function__BiConsumer__ret__V(var0 Java__util__function__BiConsumer__Instance) {
	panic("Method not implemented - java/util/WeakHashMap.forEach(Ljava/util/function/BiConsumer;)V")
}

func (this *Java__util__WeakHashMap__Impl) Impl__Get__desc____obj__Java__lang__Object__ret____obj__Java__lang__Object(var0 Java__lang__Object__Instance) Java__lang__Object__Instance {
	panic("Method not implemented - java/util/WeakHashMap.get(Ljava/lang/Object;)Ljava/lang/Object;")
}

func (this *Java__util__WeakHashMap__Impl) Impl__PrivTo__Java__util__Hash__desc____obj__Java__lang__Object__ret__I(var0 Java__lang__Object__Instance) int {
	panic("Method not implemented - java/util/WeakHashMap.hash(Ljava/lang/Object;)I")
}

func (this *Java__util__WeakHashMap__Impl) Impl__IsEmpty__desc____ret__Z() bool {
	panic("Method not implemented - java/util/WeakHashMap.isEmpty()Z")
}

func (this *Java__util__WeakHashMap__Impl) Impl__Put__desc____obj__Java__lang__Object____obj__Java__lang__Object__ret____obj__Java__lang__Object(var0 Java__lang__Object__Instance, var1 Java__lang__Object__Instance) Java__lang__Object__Instance {
	panic("Method not implemented - java/util/WeakHashMap.put(Ljava/lang/Object;Ljava/lang/Object;)Ljava/lang/Object;")
}

func (this *Java__util__WeakHashMap__Impl) Impl__PutAll__desc____obj__Java__util__Map__ret__V(var0 Java__util__Map__Instance) {
	panic("Method not implemented - java/util/WeakHashMap.putAll(Ljava/util/Map;)V")
}

func (this *Java__util__WeakHashMap__Impl) Impl__Remove__desc____obj__Java__lang__Object__ret____obj__Java__lang__Object(var0 Java__lang__Object__Instance) Java__lang__Object__Instance {
	panic("Method not implemented - java/util/WeakHashMap.remove(Ljava/lang/Object;)Ljava/lang/Object;")
}

func (this *Java__util__WeakHashMap__Impl) Impl__PrivTo__Java__util__RemoveMapping__desc____obj__Java__lang__Object__ret__Z(var0 Java__lang__Object__Instance) bool {
	panic("Method not implemented - java/util/WeakHashMap.removeMapping(Ljava/lang/Object;)Z")
}

func (this *Java__util__WeakHashMap__Impl) Impl__ReplaceAll__desc____obj__Java__util__function__BiFunction__ret__V(var0 Java__util__function__BiFunction__Instance) {
	panic("Method not implemented - java/util/WeakHashMap.replaceAll(Ljava/util/function/BiFunction;)V")
}

func (this *Java__util__WeakHashMap__Impl) Impl__PrivTo__Java__util__Resize__desc__I__ret__V(var0 int) {
	panic("Method not implemented - java/util/WeakHashMap.resize(I)V")
}

func (this *Java__util__WeakHashMap__Impl) Impl__Size__desc____ret__I() int {
	panic("Method not implemented - java/util/WeakHashMap.size()I")
}

func (this *Java__util__WeakHashMap__Impl) RawPtr__Java__util__WeakHashMap() *Java__util__WeakHashMap__Impl {
	return this
}

func (this *Java__util__WeakHashMap__Impl) Impl_Self() Java__lang__Object__Instance {
	return this
}
