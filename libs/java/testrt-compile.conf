
// Don't need the running rt.jar because we are supplying it
exclude-java-runtime-libs = true

// Prepend the statement that we use a redistributable OpenJDK JAR as our source
prepend-to-file =
  "// Generated from Azul Zulu packaged OpenJDK JAR and carries the same GPL license with the classpath exception"

class-path = [
  ${ZULU_JDK_HOME}/jmods/java.base.jmod
]

// Put in testrt which automatically gives "testrt" as the package name
out-dir = libs/java/testrt

file-grouping = "package"

reflection = none

classes = [
  "java.io.PrintStream"
  "java.lang.Boolean"
  "java.lang.Byte"
  "java.lang.Character"
  "java.lang.Class"
  "java.lang.ClassLoader"
  "java.lang.ClassCastException"
  "java.lang.Double"
  "java.lang.Exception"
  "java.lang.Float"
  "java.lang.IllegalArgumentException"
  "java.lang.IllegalMonitorStateException"
  "java.lang.Integer"
  "java.lang.Long"
  "java.lang.NegativeArraySizeException"
  "java.lang.NullPointerException"
  "java.lang.Short"
  "java.lang.String"
  "java.lang.StringBuilder"
  "java.lang.System"
  "java.lang.UnsupportedOperationException"
  "java.lang.VirtualMachineError"
  "java.lang.Void"
  "java.lang.invoke.CallSite"
  "java.lang.invoke.LambdaMetafactory"
  "java.lang.invoke.MethodHandle"
  "java.lang.invoke.MethodHandles"
  "java.lang.invoke.MethodHandles$Lookup"
  "java.lang.invoke.MethodType"
  "java.lang.invoke.SerializedLambda"
  "java.util.function.BiConsumer"
  "java.util.function.BinaryOperator"
  "java.util.function.IntFunction"
  "java.util.function.Function"
  "java.util.stream.Stream"
]

class-manips {
  "*" = [

    {
      // Add some fields we use
      fields {
        "java.lang.String::Underlying" { go = "string" }
        "java.lang.StringBuilder::Underlying" { go = "string" }
        "java.lang.Throwable::Message" { go = "java.lang.String", instance-iface = true }
        // Primitive wrappers values
        "java.lang.Boolean::Value" { go = "bool" }
        "java.lang.Byte::Value" { go = "byte" }
        "java.lang.Character::Value" { go = "rune" }
        "java.lang.Float::Value" { go = "float32" }
        "java.lang.Integer::Value" { go = "int" }
        "java.lang.Long::Value" { go = "int64" }
        "java.lang.Short::Value" { go = "int16" }
        "java.lang.Double::Value" { go = "float64" }
      }

      // Exclude just the impl of certain methods we have overridden
      methods {
        "java.io.PrintStream::println(C)V" { exclude-impl = true }
        "java.io.PrintStream::println(D)V" { exclude-impl = true }
        "java.io.PrintStream::println(F)V" { exclude-impl = true }
        "java.io.PrintStream::println(I)V" { exclude-impl = true }
        "java.io.PrintStream::println(J)V" { exclude-impl = true }
        "java.io.PrintStream::println(Ljava/lang/String;)V" { exclude-impl = true }
        "java.io.PrintStream::println(Z)V" { exclude-impl = true }
        "java.lang.ClassCastException::<init>()V" { exclude-impl = true }
        "java.lang.Exception::<init>(Ljava/lang/String;)V" { exclude-impl = true }
        "java.lang.Exception::<init>(Ljava/lang/String;Ljava/lang/Throwable;)V" { exclude-impl = true }
        "java.lang.IllegalMonitorStateException::<init>()V" { exclude-impl = true }
        "java.lang.Long::valueOf(J)Ljava/lang/Long;" { exclude-impl = true }
        "java.lang.Long::longValue()J" { exclude-impl = true }
        "java.lang.Long::<init>(J)V" { exclude-impl = true }
        "java.lang.NegativeArraySizeException::<init>(Ljava/lang/String;)V" { exclude-impl = true }
        "java.lang.NullPointerException::<init>(Ljava/lang/String;)V" { exclude-impl = true }
        "java.lang.Object::<init>()V" { exclude-impl = true }
        "java.lang.Object::getClass()Ljava/lang/Class;" { exclude-impl = true }
        "java.lang.Object::hashCode()I" { exclude-impl = true }
        "java.lang.StringBuilder::<init>()V" { exclude-impl = true }
        "java.lang.StringBuilder::append(I)Ljava/lang/StringBuilder;" { exclude-impl = true }
        "java.lang.StringBuilder::append(Ljava/lang/String;)Ljava/lang/StringBuilder;" { exclude-impl = true }
        "java.lang.StringBuilder::toString()Ljava/lang/String;" { exclude-impl = true }
        "java.lang.System::<clinit>()V" { exclude-impl = true }
        "java.lang.System::identityHashCode(Ljava/lang/Object;)I" { exclude-impl = true }
        "java.lang.Throwable::<init>(Ljava/lang/String;)V" { exclude-impl = true }
        "java.lang.Throwable::getMessage()Ljava/lang/String;" { exclude-impl = true }
        "java.lang.VirtualMachineError::<init>(Ljava/lang/String;)V" { exclude-impl = true }
      }
    }

    // Empty all inits
    {
      priority = -200
      method-filter = { any-modifiers = [ public, protected ] }
      methods { "<init>" { empty = true } }
    }
    {
      priority = -200
      methods { "<clinit>" { empty = true } }
    }
    {
      priority = -200
      methods { "<clinit>" { exclude = false } }
    }

    // Only fields and methods that reference classes we know
    {
      priority = -300
      field-filter { references-excluded-class = true }
      fields { "*" { exclude = true } }
      method-filter { signature-references-excluded-class = true }
      methods { "*" { exclude = true } }
    }

    // Exclude all private fields and all private methods
    {
      priority = -400
      field-filter { any-modifiers = [ private ] }
      fields { "*" { exclude = true } }
      method-filter { any-modifiers = [ private ] }
      methods { "*" { exclude = true } }
    }

    // Panic all method impls
    {
      priority = -500
      methods { "*" { panic = true } }
    }
  ]
}