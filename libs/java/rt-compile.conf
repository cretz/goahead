
// Don't need the running rt.jar because we are supplying it
exclude-running-runtime-jar = true

// This automatically trims off methods for classes we don't reference
only-methods-referencing-classes = true
only-fields-referencing-classes = true

show-exclusions = true

// Prepend the statement that we use a redistributable OpenJDK JAR as our source
prepend-to-file =
  "// Generated from Azul Zulu packaged OpenJDK JAR and carries the same GPL license with the classpath exception"

class-path = [
  ${ZULU_JDK_HOME}/jmods/java.base.jmod
]

// Put in rt which automatically gives "rt" as the package name
out-dir = libs/java/rt

//parallel = true

file-grouping = "class"

file-transformers = [ "goahead.compile.RtFileTransformer" ]

classes = [
  "java.io.BufferedWriter"
  "java.io.OutputStream"
  "java.io.OutputStreamWriter"
  "java.io.PrintStream"
  "java.io.Writer"
  "java.lang.Appendable"
  "java.lang.Boolean"
  "java.lang.Byte"
  "java.lang.Character"
  "java.lang.Class"
  "java.lang.ClassLoader"
  "java.lang.ClassCastException"
  "java.lang.Double"
  "java.lang.Exception"
  "java.lang.Float"
  "java.lang.IllegalArgumentException"
  "java.lang.IllegalMonitorStateException"
  "java.lang.Integer"
  "java.lang.Long"
  "java.lang.NegativeArraySizeException"
  "java.lang.NullPointerException"
  "java.lang.Object"
  "java.lang.Short"
  "java.lang.String"
  "java.lang.StringBuilder"
  "java.lang.System"
  "java.lang.VirtualMachineError"
  "java.lang.Void"
  "java.lang.invoke.CallSite"
  "java.lang.invoke.LambdaMetafactory"
  "java.lang.invoke.MethodHandle"
  "java.lang.invoke.MethodHandles"
  "java.lang.invoke.MethodHandles$Lookup"
  "java.lang.invoke.MethodType"
  "java.lang.invoke.SerializedLambda"
  "java.util.Formatter"
  "java.util.function.BiConsumer"
  "java.util.function.BinaryOperator"
  "java.util.function.IntFunction"
  "java.util.function.Function"
  "java.util.stream.Stream"
]

exclude-fields = [
  // Remove all fields in String and StringBuilder, we add our own
  "java.lang.String"
  "java.lang.StringBuilder"
]

override-methods = [
  "java.lang.System::<clinit>()V"
]

bodyless-methods = [
  // Let's just panic everything for now
  //"*"
]