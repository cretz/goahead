
// Don't need the running rt.jar because we are supplying it
exclude-running-runtime-jar = true

// Prepend the statement that we use a redistributable OpenJDK JAR as our source
prepend-to-file =
  "// Generated from Azul Zulu packaged OpenJDK JAR and carries the same GPL license with the classpath exception"

class-path = [
  ${ZULU_JDK_HOME}/jmods/java.base.jmod
]

// Put in rt which automatically gives "rt" as the package name
out-dir = libs/java/rt

//parallel = true

// On Windows, this breaks; see https://github.com/golang/go/issues/18468
// file-grouping = "class"
file-grouping = "first-packages-4"

any-class-modifiers = [ public, protected, package-private ]
classes = [
  "java.io.?"
  "java.lang.?"
  "java.lang.invoke.?"
  "java.util.?"
  "java.util.function.BiConsumer"
  "java.util.function.BinaryOperator"
  "java.util.function.IntFunction"
  "java.util.function.Function"
  "java.util.stream.Stream"
]

include-all-referenced = [
  {
    priority = 200
    field-filter { references-excluded-class = true }
    fields { "*" { exclude = true } }
    method-filter { signature-references-excluded-class = true }
    methods { "*" { exclude = true } }
  }
  {
    priority = 100
    method-filter { body-references-excluded-class = true }
    methods { "*" = [{ exclude = false }, { empty = true }] }
  }
  {
    fields { "*" { exclude = false } }
    methods { "*" = [{ exclude = false }, { as-is = true }] }
  }
]

forward = [
  {
    priority = 300
    methods { "*" { forward-from-out-folder = true } }
  }
]

exclude-and-panic = [
  {
    fields { "*" { exclude = true } }
    methods { "*" { panic = true } }
  }
]


class-manips {
  "java.io.BufferedWriter" = ${include-all-referenced}
  "java.io.FilterOutputStream" = ${include-all-referenced}
  "java.io.OutputStream" = ${include-all-referenced}
  "java.io.OutputStreamWriter" = ${include-all-referenced}
  "java.io.PrintStream" = ${include-all-referenced}
  "java.io.Writer" = ${include-all-referenced}
  "java.lang.ArrayStoreException" = ${include-all-referenced}
  "java.lang.AssertionError" = ${include-all-referenced}
  "java.lang.Class" = ${forward} ${exclude-and-panic}
  "java.lang.ClassNotFoundException" = ${include-all-referenced}
  "java.lang.Error" = ${include-all-referenced}
  "java.lang.Exception" = ${include-all-referenced}
  "java.lang.IndexOutOfBoundsException" = ${include-all-referenced}
  "java.lang.NegativeArraySizeException" = ${include-all-referenced}
  "java.lang.Object" = ${forward} ${exclude-and-panic}
  "java.lang.NullPointerException" = ${include-all-referenced}
  "java.lang.RuntimeException" = ${include-all-referenced}
  "java.lang.String" = ${forward} ${exclude-and-panic}
  "java.lang.StringBuilder" = ${forward} ${exclude-and-panic}
  "java.lang.StringIndexOutOfBoundsException" = ${include-all-referenced}
  "java.lang.System" = ${forward} ${include-all-referenced}
  "java.lang.Throwable" = ${forward} ${exclude-and-panic}
  "java.lang.VirtualMachineError" = ${include-all-referenced}
  "java.util.Objects" = ${include-all-referenced}

  "*" = [
    // Empty all inits
    {
      priority = -200
      method-filter = { any-modifiers = [ public, protected ] }
      methods { "<init>" { empty = true } }
    }
    {
      priority = -200
      methods { "<clinit>" { empty = true } }
    }
    {
      priority = -200
      methods { "<clinit>" { exclude = false } }
    }

    // Only fields and methods that reference classes we know
    {
      priority = -300
      field-filter { references-excluded-class = true }
      fields { "*" { exclude = true } }
      method-filter { signature-references-excluded-class = true }
      methods { "*" { exclude = true } }
    }

    // Exclude all private fields and all private methods
    {
      priority = -400
      field-filter { any-modifiers = [ private ] }
      fields { "*" { exclude = true } }
      method-filter { any-modifiers = [ private ] }
      methods { "*" { exclude = true } }
    }

    // Panic all method impls
    {
      priority = -500
      methods { "*" { panic = true } }
    }
  ]
}